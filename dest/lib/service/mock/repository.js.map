{"version":3,"sources":["../src/lib/service/mock/repository.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;;;;;;;;AAOH,kCAAkC;AAElC;IASE;;;;OAIG;IACH,YAAa,GAAW;QACtB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAA;IAChB,CAAC;IAED;;;;OAIG;IACH,IAAW,IAAI;QACb,MAAM,CAAC,IAAI,EAAE,GAAG,KAAK,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;QAE5D,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;QAC7C,MAAM,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;QAEzB,OAAO,eAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAA;IAC7B,CAAC;IAED;;;;;;;;OAQG;IACU,KAAK,CAAE,CAAS,EAAE,SAAS;;YACtC,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAA;QACrD,CAAC;KAAA;IAED;;;;;;OAMG;IACU,UAAU;;YACrB,OAAO,CAAC,oBAAoB,CAAC,CAAA;QAC/B,CAAC;KAAA;IAED;;;;;;;;OAQG;IACU,KAAK,CAAE,SAAS,EAAE,IAAI,EAAE,CAAC;;YACpC,OAAM;QACR,CAAC;KAAA;CACF;AApED,gCAoEC","file":"repository.js","sourcesContent":["/**\n * houston/src/lib/service/mock/repository.ts\n * A mock repository used for testing.\n */\n\nimport * as os from 'os'\nimport * as path from 'path'\nimport * as uuid from 'uuid/v4'\n\nimport { Repository as RepositoryInterface } from '../base/repository'\nimport { sanitize } from '../rdnn'\n\nexport class Repository implements RepositoryInterface {\n\n  /**\n   * The repository url\n   *\n   * @var {string}\n   */\n  public url: string\n\n  /**\n   * Creates a new GitHub Repository\n   *\n   * @param {string} url - The full github url\n   */\n  constructor (url: string) {\n    this.url = url\n  }\n\n  /**\n   * Returns the default RDNN value for this repository\n   *\n   * @return {string}\n   */\n  public get rdnn () {\n    const [host, ...paths] = this.url.split('://')[1].split('/')\n\n    const h = host.split('.').reverse().join('.')\n    const p = paths.join('.')\n\n    return sanitize(`${h}${p}`)\n  }\n\n  /**\n   * clone\n   * Clones the repository to a folder\n   *\n   * @async\n   * @param {string} p - The path to clone to\n   * @param {string} [reference] - The branch to clone\n   * @return {void}\n   */\n  public async clone (p: string, reference): Promise<void> {\n    throw new Error('Unimplimented in mock repository')\n  }\n\n  /**\n   * references\n   * Returns a list of references this repository has\n   *\n   * @async\n   * @return {string[]}\n   */\n  public async references (): Promise<string[]> {\n    return ['refs/origin/master']\n  }\n\n  /**\n   * Fake uploads an asset.\n   *\n   * @async\n   * @param {string} reference\n   * @param {string} name\n   * @param {string} p\n   * @return {void}\n   */\n  public async asset (reference, name, p) {\n    return\n  }\n}\n"]}