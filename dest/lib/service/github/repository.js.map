{"version":3,"sources":["../src/lib/service/github/repository.ts"],"names":[],"mappings":"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","file":"repository.js","sourcesContent":["/**\n * houston/src/lib/service/github/repository.ts\n * Handles interaction with GitHub repositories.\n *\n * @return {class} Repository - A GitHub repository class\n */\n\nimport * as fs from 'fs-extra'\nimport * as Git from 'nodegit'\nimport * as os from 'os'\nimport * as path from 'path'\nimport * as agent from 'superagent'\nimport * as uuid from 'uuid/v4'\n\nimport { Repository as RepositoryInterface } from '../base/repository'\nimport { sanitize } from '../rdnn'\n\nexport class Repository implements RepositoryInterface {\n\n  /**\n   * tmpFolder\n   * Folder to use as scratch space for cloning repos\n   *\n   * @var {string}\n   */\n  protected static tmpFolder = path.resolve(os.tmpdir(), 'houston')\n\n  /**\n   * username\n   * The GitHub username or organization.\n   *\n   * @var {string}\n   */\n  public username: string\n\n  /**\n   * repository\n   * The GitHub user's repository name\n   *\n   * @var {string}\n   */\n  public repository: string\n\n  /**\n   * auth\n   * Authentication to use when interacting\n   *\n   * @var {string}\n   */\n  public auth?: string\n\n  /**\n   * reference\n   * The reference to branch or tag.\n   *\n   * @var {string}\n   */\n  public reference = 'refs/heads/master'\n\n  /**\n   * Creates a new GitHub Repository\n   *\n   * @param {string} url - The full github url\n   */\n  constructor (url: string) {\n    this.url = url\n  }\n\n  /**\n   * url\n   * Returns the Git URL for the repository\n   *\n   * @return {string}\n   */\n  public get url (): string {\n    if (this.auth != null) {\n      return `https://${this.auth}@github.com/${this.username}/${this.repository}.git`\n    }\n\n    return `https://github.com/${this.username}/${this.repository}.git`\n  }\n\n  /**\n   * url\n   * Sets the Git URL for the repository\n   * NOTE: Auth code is case sensitive, so we can't lowercase the whole url\n   *\n   * @return {string}\n   */\n  public set url (p: string) {\n    if (p.indexOf('github') === -1) {\n      throw new Error('Given URL is not a GitHub repository')\n    }\n\n    const chunks = p.split(/[@\\/:\\.]/)\n    const reverseChunks = [...chunks].reverse()\n\n    if (reverseChunks[0].toLowerCase() === 'git') {\n      this.username = reverseChunks[2]\n      this.repository = reverseChunks[1]\n    } else {\n      this.username = reverseChunks[1]\n      this.repository = reverseChunks[0]\n    }\n\n    if (chunks[0].toLowerCase() === 'https' || chunks[0].toLowerCase() === 'http') {\n      if (chunks[3].toLowerCase() !== 'github') {\n        this.auth = chunks[3]\n      }\n    }\n  }\n\n  /**\n   * Returns the default RDNN value for this repository\n   *\n   * @return {string}\n   */\n  public get rdnn () {\n    return sanitize(`com.github.${this.username}.${this.repository}`)\n  }\n\n  /**\n   * clone\n   * Clones the repository to a folder\n   *\n   * @async\n   * @param {string} p - The path to clone to\n   * @param {string} [reference] - The branch to clone\n   * @return {void}\n   */\n  public async clone (p: string, reference = this.reference): Promise<void> {\n    const repo = await Git.Clone(this.url, p)\n    const ref = await Git.Reference.lookup(repo, reference)\n\n    await repo.checkoutRef(ref)\n\n    await fs.remove(path.resolve(p, '.git'))\n  }\n\n  /**\n   * references\n   * Returns a list of references this repository has\n   * TODO: Try to figure out a more optimized way\n   *\n   * @async\n   * @return {string[]}\n   */\n  public async references (): Promise<string[]> {\n    const p = path.resolve(Repository.tmpFolder, uuid())\n    const repo = await Git.Clone(this.url, p)\n\n    const branches = await repo.getReferenceNames(Git.Reference.TYPE.LISTALL)\n\n    console.log('found references: ', branches)\n\n    await fs.remove(p)\n\n    return branches\n  }\n\n  /**\n   * Uploads an asset to a GitHub release.\n   *\n   * @async\n   * @param {string} reference\n   * @param {string} p\n   * @param {string} type - The HTTP Content-Type (\"text/markdown\")\n   * @param {string} name\n   * @param {string} [description]\n   * @return {void}\n   */\n  public async asset (reference, p, type, name, description) {\n    const url = `${this.username}/${this.repository}/releases/tags/${reference}`\n    const { body } = await agent\n      .get(`https://api.github.com/repos/${url}`)\n      .set('accept', 'application/vnd.github.v3+json')\n      .set('authorization', `token ${this.auth}`)\n\n    if (body.upload_url == null) {\n      throw new Error('No Upload URL for GitHub release')\n    }\n\n    // TODO: Should we remove existing assets that would conflict?\n\n    const stat = await fs.stat(p)\n    const file = await fs.createReadStream(p)\n\n    await new Promise((resolve, reject) => {\n      const res = agent\n        .post(body.upload_url.replace('{?name,label}', ''))\n        .set('content-type', type)\n        .set('content-length', stat.size)\n        .set('authorization', `token ${this.auth}`)\n        .query({ name })\n        .query((description != null) ? { label: description } : {})\n        .on('error', reject)\n        .on('end', resolve)\n\n      file.pipe(res)\n    })\n  }\n}\n"]}