{"version":3,"sources":["../src/lib/server/server.ts"],"names":[],"mappings":"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","file":"server.js","sourcesContent":["/**\n * houston/src/lib/server/server.ts\n * A basic HTTP web server used for various processes.\n *\n * @exports {Class} Server - An HTTP web server\n */\n\nimport * as http from 'http'\nimport { inject, injectable, multiInject } from 'inversify'\nimport * as Koa from 'koa'\nimport * as Router from 'koa-router'\n\nimport { report } from './middleware/report'\n\nimport { Config } from '../config'\nimport { Logger } from '../log'\nimport { Controller } from './controller'\nimport { Servable } from './type'\n\n// To match the Koa middleware signature requires an any type\n// tslint:disable-next-line no-any\nexport type Middleware = (config: Config) => (ctx: Koa.Context, next?: () => Promise<any>) => void\n\n/**\n * Server\n * A basic HTTP web server\n *\n * @property {Server} server\n * @property {number} port\n *\n * @property {boolean} active\n */\n@injectable()\nexport class Server implements Servable {\n  /**\n   * A basic http server. Used for low level access (mostly testing)\n   *\n   * @var {http.Server}\n   */\n  public server?: http.Server\n\n  /**\n   * The http port we will bind to\n   *\n   * @var {Number}\n   */\n  public port?: number\n\n  /**\n   * The application configuration\n   *\n   * @var {Config}\n   */\n  protected config: Config\n\n  /**\n   * A list of controllers this server has\n   *\n   * @var {Controller[]}\n   */\n  protected controllers: Controller[] = []\n\n  /**\n   * A list of middlewares that will be ran on every route\n   *\n   * @var {Middleware[]}\n   */\n  protected middlewares: Middleware[] = [\n    report\n  ]\n\n  /**\n   * A logger instance for the whole server.\n   *\n   * @var {Logger}\n   */\n  protected logger: Logger\n\n  /**\n   * Our Koa server instance\n   *\n   * @var {Koa}\n   */\n  protected koa: Koa\n\n  /**\n   * The koa router via koa-router\n   *\n   * @var {Router} router\n   */\n  protected router: Router\n\n  /**\n   * Creates a new web server\n   *\n   * @param {Config} config - The configuration to use\n   * @param {Log} log - The logger instance to use\n   */\n  constructor (\n    @inject(Config) config: Config,\n    @inject(Logger) logger: Logger\n  ) {\n    this.config = config\n    this.logger = logger\n\n    this.koa = new Koa()\n    this.router = new Router()\n\n    this.koa.env = config.get('environment', 'production')\n  }\n\n  /**\n   * Returns true if the http server is currently active.\n   *\n   * @return {boolean}\n   */\n  public get active (): boolean {\n    return (this.server !== undefined)\n  }\n\n  /**\n   * listen\n   * Starts web server services\n   *\n   * @async\n   * @param {number} [port] - A port to listen on. Kept for backwards support\n   *\n   * @throws {Error} - When unable to listen to requested port\n   * @return {Server} - An active Server class\n   */\n  public async listen (port = 0): Promise<this> {\n    const env = this.config.get('environment')\n\n    try {\n      this.server = this\n        .registerControllers()\n        .registerMiddleware()\n        .http()\n\n      await new Promise((resolve, reject) => {\n        this.server.listen(port, undefined, undefined, (err: Error) => {\n          if (err) {\n            return reject(err)\n          }\n\n          return resolve()\n        })\n      })\n    } catch (err) {\n      this.logger.error(`Server unable to listen on port ${port} with ${env} configuration`)\n        .setError(err)\n        .send()\n\n      throw err\n    }\n\n    this.port = this.server.address().port\n    this.logger.info(`Server listening on port ${this.port} with ${env} configuration`).send()\n\n    return this\n  }\n\n  /**\n   * close\n   * Stops the HTTP server\n   *\n   * @async\n   *\n   * @throws {Error} - When the Server class is messed up\n   * @return {Server} - An inactive Server class\n   */\n  public async close (): Promise<this> {\n    if (this.server != null) {\n      await new Promise((resolve, reject) => {\n        this.server.close((err) => {\n          if (err != null) {\n            return reject(err)\n          }\n\n          return resolve()\n        })\n      })\n    }\n\n    this.server = null\n    this.port = null\n\n    return this\n  }\n\n  /**\n   * http\n   * Returns an http server wrapping current server. Used for testing and low\n   * level plugins\n   *\n   * @return {http.Server} - HTTP web server\n   */\n  public http (): http.Server {\n    return http.createServer(this.koa.callback())\n  }\n\n  /**\n   * Adds all of the controllers to the server.\n   *\n   * @return {Server}\n   */\n  protected registerControllers () {\n    this.controllers.forEach((controller) => {\n      this.koa.use(controller.middleware())\n    })\n\n    return this\n  }\n\n  /**\n   * Adds all of the middleware functions to the server.\n   *\n   * @return {Server}\n   */\n  protected registerMiddleware () {\n    this.middlewares.forEach((middleware) => {\n      this.koa.use(middleware(this.config))\n    })\n\n    return this\n  }\n}\n"]}