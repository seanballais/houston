{"version":3,"sources":["../src/lib/server/middleware.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;;;;;;;;;;;;;;;;;AAEH,yCAAsC;AAEtC,qCAAoC;AAGpC,IAAsB,UAAU,GAAhC;IAgBE;;OAEG;IACH;QAjBA;;;;WAIG;QACO,WAAM,GAAG,GAAG,CAAA;QAapB,IAAI,CAAC,MAAM,GAAG,IAAI,MAAM,CAAC;YACvB,MAAM,EAAE,IAAI,CAAC,MAAM;SACpB,CAAC,CAAA;IACJ,CAAC;IAED;;;;OAIG;IACI,WAAW;QACf,OAAM;IACT,CAAC;IAED;;;;;OAKG;IACI,UAAU;QACf,OAAO,CAAO,GAAG,EAAE,IAAI,EAAE,EAAE,gDAAC,OAAA,IAAI,EAAE,CAAA,GAAA,CAAA;IACpC,CAAC;CACF,CAAA;AA3CqB,UAAU;IAD/B,sBAAU,EAAE;;GACS,UAAU,CA2C/B;AA3CqB,gCAAU","file":"middleware.js","sourcesContent":["/**\n * houston/src/lib/server/middleware.ts\n * A basic interface for a server controller.\n */\n\nimport { injectable } from 'inversify'\nimport { Context } from 'koa'\nimport * as Router from 'koa-router'\n\n@injectable()\nexport abstract class Controller {\n\n  /**\n   * The prefix for the controller.\n   *\n   * @var {String}\n   */\n  protected prefix = '/'\n\n  /**\n   * The koa-router instance we will use\n   *\n   * @var {Router}\n   */\n  protected router: Router\n\n  /**\n   * Creates a new controller\n   */\n  public constructor () {\n    this.router = new Router({\n      prefix: this.prefix\n    })\n  }\n\n  /**\n   * Sets up all of the given routes with the router.\n   *\n   * @return {void}\n   */\n  public setupRoutes () {\n     return\n  }\n\n  /**\n   * Returns a list of middleware / routes to run.\n   *\n   * @async\n   * @return {IMiddleware}\n   */\n  public middleware (): (ctx: Context, next: () => void) => Promise<void> {\n    return async (ctx, next) => next()\n  }\n}\n"]}