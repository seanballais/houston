{"version":3,"sources":["../src/lib/server/middleware/report.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;;;;;;;;AAKH,kDAA8C;AAE9C;;;;;GAKG;AACH,gBAAwB,MAAc;IAEpC;;;;;;OAMG;IACH,OAAO,CAAO,GAAY,EAAE,IAAsC,EAAE,EAAE;QACpE,IAAI;YACF,MAAM,IAAI,CAAC,GAAG,CAAC,CAAA;SAChB;QAAC,OAAO,CAAC,EAAE;YACV,qBAAS,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,GAAG,CAAC,CAAA;SAC7B;IACH,CAAC,CAAA,CAAA;AACH,CAAC;AAhBD,wBAgBC","file":"report.js","sourcesContent":["/**\n * houston/src/lib/server/middleware/report.ts\n * Catches and reports errors.\n */\n\nimport { Context } from 'koa'\n\nimport { Config } from '../../config'\nimport { transform } from '../error/transform'\n\n/**\n * A middleware factory function for reporting errors\n *\n * @param {Config} config\n * @return {Function}\n */\nexport function report (config: Config) {\n\n  /**\n   * Reports error logs\n   *\n   * @async\n   * @param {Context} context\n   * @return {Function} - A compression function\n   */\n  return async (ctx: Context, next: (ctx?: Context) => Promise<void>) => {\n    try {\n      await next(ctx)\n    } catch (e) {\n      transform(e).httpRender(ctx)\n    }\n  }\n}\n"]}