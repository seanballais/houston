{"version":3,"sources":["../src/lib/server/error/error.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;;;;;;;;AAMH,oBAA4B,SAAQ,KAAK;IAgBvC;;;;;OAKG;IACH,YAAoB,MAAM,GAAG,GAAG,EAAE,OAAO,GAAG,uBAAuB;QACjE,KAAK,CAAC,OAAO,CAAC,CAAA;QAEd,IAAI,CAAC,UAAU,GAAG,MAAM,CAAA;QACxB,IAAI,CAAC,WAAW,GAAG,OAAO,CAAA;IAC5B,CAAC;IAED;;;;;;OAMG;IACU,UAAU,CAAE,GAAY;;YACnC,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC,UAAU,CAAA;YAC5B,GAAG,CAAC,IAAI,GAAG,GAAG,IAAI,CAAC,UAAU,MAAM,IAAI,CAAC,WAAW,EAAE,CAAA;YAErD,OAAM;QACR,CAAC;KAAA;CACF;AA1CD,wCA0CC","file":"error.js","sourcesContent":["/**\n * houston/src/lib/server/error/error.ts\n * A super basic easy to use http server error\n */\n\nimport { Context } from 'koa'\n\nimport { Error as HttpError } from '../type'\n\nexport class BasicHttpError extends Error implements HttpError {\n\n  /**\n   * The HTTP status code\n   *\n   * @var {Number}\n   */\n  public httpStatus: number\n\n  /**\n   * A public readable error message\n   *\n   * @var {String}\n   */\n  public httpMessage: string\n\n  /**\n   * Creates a new basic http error\n   *\n   * @param {Number} status\n   * @param {String} message\n   */\n  public constructor (status = 500, message = 'Internal Server Error') {\n    super(message)\n\n    this.httpStatus = status\n    this.httpMessage = message\n  }\n\n  /**\n   * Renders error to an http output\n   *\n   * @async\n   * @param {Context} ctx\n   * @return {void}\n   */\n  public async httpRender (ctx: Context) {\n    ctx.status = this.httpStatus\n    ctx.body = `${this.httpStatus} - ${this.httpMessage}`\n\n    return\n  }\n}\n"]}