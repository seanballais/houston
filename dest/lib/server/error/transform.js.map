{"version":3,"sources":["../src/lib/server/error/transform.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;;;;;;;;AAKH,mCAAwC;AAExC;;;;;GAKG;AACH,mBAA2B,CAAQ;IACjC,iFAAiF;IACjF,kCAAkC;IAClC,MAAM,KAAK,GAAG,CAAQ,CAAA;IAEtB,IAAI;QACF,IAAI,OAAO,KAAK,CAAC,UAAU,KAAK,QAAQ,EAAE;YACxC,KAAK,CAAC,UAAU,GAAG,GAAG,CAAA;SACvB;QAED,mDAAmD;QACnD,IAAI,KAAK,CAAC,UAAU,GAAG,GAAG,IAAI,KAAK,CAAC,UAAU,IAAI,GAAG,EAAE;YACrD,KAAK,CAAC,UAAU,GAAG,GAAG,CAAA;SACvB;QAED,IAAI,OAAO,KAAK,CAAC,UAAU,KAAK,UAAU,EAAE;YAC1C,gFAAgF;YAChF,KAAK,CAAC,UAAU,GAAG,CAAO,GAAY,EAAE,EAAE;gBACxC,GAAG,CAAC,MAAM,GAAG,KAAK,CAAC,UAAU,CAAA;gBAE7B,OAAM;YACR,CAAC,CAAA,CAAA;SACF;KACF;IAAC,OAAO,CAAC,EAAE;QACV,iGAAiG;QACjG,OAAO,IAAI,sBAAc,EAAE,CAAA;KAC5B;IAED,OAAO,KAAK,CAAA;AACd,CAAC;AA7BD,8BA6BC","file":"transform.js","sourcesContent":["/**\n * houston/src/lib/server/error/interface.ts\n * An interface for any error able to be rendered\n */\n\nimport { Context } from 'koa'\n\nimport { Error as HttpError } from '../type'\nimport { BasicHttpError } from './error'\n\n/**\n * Makes any sort of error an HTTP handleable error.\n *\n * @param {Error} error\n * @return {HttpError}\n */\nexport function transform (e: Error): HttpError {\n  // TODO: I have yet to find a nice way to convert things. More ninja skill needed\n  // tslint:disable-next-line no-any\n  const error = e as any\n\n  try {\n    if (typeof error.httpStatus !== 'number') {\n      error.httpStatus = 500\n    }\n\n    // That's very weird. Probably a third party error.\n    if (error.httpStatus < 200 || error.httpStatus >= 600) {\n      error.httpStatus = 500\n    }\n\n    if (typeof error.httpRender !== 'function') {\n      // We can just set the status and let koa or the browser deal with what to show.\n      error.httpRender = async (ctx: Context) => {\n        ctx.status = error.httpStatus\n\n        return\n      }\n    }\n  } catch (e) {\n    // If there was some weird error trying to convert, cover it up and hope we don't expose secrets.\n    return new BasicHttpError()\n  }\n\n  return error\n}\n"]}