{"version":3,"sources":["../src/lib/utility/faker/index.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;;;;;;;;;;;;AAEH,6CAA4C;AAE5C,0CAAyC;AACzC,yCAAmD;AAEnD,iCAAqD;AAGrD,IAAa,KAAK,GAAlB,WAAmB,SAAQ,SAAS;IAIlC;;;;OAIG;IACH,YAAyC,YAA6B,EAAE;QACtE,KAAK,CAAC;YACJ,MAAM,EAAE,IAAI;YACZ,OAAO,EAAE,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,CAAC;SAC1B,CAAC,CAAA;QAEF,SAAS,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;YAC7B,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAA;QACjC,CAAC,CAAC,CAAA;IACJ,CAAC;IAES,gBAAgB,CAAE,QAAuB;QACjD,MAAM,CAAC,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAA;QAExB,kDAAkD;IACpD,CAAC;CAEF,CAAA;AA1BY,KAAK;IADjB,sBAAU,EAAE;IAUG,WAAA,uBAAW,CAAC,oBAAa,CAAC,CAAA;;GAT7B,KAAK,CA0BjB;AA1BY,sBAAK","file":"index.js","sourcesContent":["/**\n * houston/src/lib/utility/faker/index.ts\n * Creates fake data. Used for testing and factories\n */\n\nimport * as BaseFaker from 'faker/lib/index'\nimport * as Random from 'faker/lib/random'\nimport * as locale from 'faker/locale/en'\nimport { injectable, multiInject } from 'inversify'\n\nimport { fakerProvider, FakerProvider } from './type'\n\n@injectable()\nexport class Faker extends BaseFaker {\n\n  public locale: string\n\n  /**\n   * Creates a new new Faker instance\n   *\n   * @param {FakerProvider[]} [providers]\n   */\n  constructor (@multiInject(fakerProvider) providers: FakerProvider[] = []) {\n    super({\n      locale: 'en',\n      locales: [{ en: locale }]\n    })\n\n    providers.forEach((provider) => {\n      this.registerProvider(provider)\n    })\n  }\n\n  protected registerProvider (provider: FakerProvider) {\n    const p = provider(this)\n\n    // TODO: Allow extending Faker with more providers\n  }\n\n}\n"]}