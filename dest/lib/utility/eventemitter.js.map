{"version":3,"sources":["../src/lib/utility/eventemitter.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;;;;;;;;AAEH,iDAA6C;AAC7C,mCAAqC;AAErC,MAAM,YAAY,GAAG;IACnB,SAAS,EAAE,GAAG;IACd,YAAY,EAAE,EAAE;IAChB,WAAW,EAAE,KAAK;IAClB,iBAAiB,EAAE,IAAI;IACvB,QAAQ,EAAE,IAAI;CACf,CAAA;AAED,kBAA0B,SAAQ,6BAAa;IAC7C;;;;OAIG;IACH,YAAoB,IAAI,GAAG,EAAE;QAC3B,KAAK,CAAC,qBAAY,CAAC,EAAE,EAAE,YAAY,EAAE,IAAI,CAAC,CAAC,CAAA;IAC7C,CAAC;IAED;;;;;;;;OAQG;IACU,cAAc,CAAK,KAAK,EAAE,GAAG;;YACxC,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAA;YACvC,IAAI,KAAK,GAAG,GAAG,CAAA;YAEf,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE;gBAChC,MAAM,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;qBACnC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,KAAK,GAAG,MAAM,CAAC,CAAC,CAAA;aACtC;YAED,OAAO,KAAK,CAAA;QACd,CAAC;KAAA;CACF;AA9BD,oCA8BC","file":"eventemitter.js","sourcesContent":["/**\n * houston/src/lib/utility/eventemitter.ts\n * An event emitter based on eventemitter2 with some nice added features\n */\n\nimport { EventEmitter2 } from 'eventemitter2'\nimport { defaultsDeep } from 'lodash'\n\nconst DEFAULT_OPTS = {\n  delimiter: ':',\n  maxListeners: 10,\n  newListener: false,\n  verboseMemoryLeak: true,\n  wildcard: true\n}\n\nexport class EventEmitter extends EventEmitter2 {\n  /**\n   * Creates a new event emitter\n   *\n   * @param {Object} [opts]\n   */\n  public constructor (opts = {}) {\n    super(defaultsDeep({}, DEFAULT_OPTS, opts))\n  }\n\n  /**\n   * This emites an async event, that will resolve the results by running\n   * listeners step by step. This is great for things that can be extended and\n   * modified by listeners.\n   *\n   * @param {string} event\n   * @param {*} arg\n   * @return {*} - Results of arg after modification from listeners\n   */\n  public async emitAsyncChain<T> (event, arg): Promise<T> {\n    const listeners = this.listeners(event)\n    let value = arg\n\n    for (const listener of listeners) {\n      await Promise.resolve(listener(value))\n        .then((result) => (value = result))\n    }\n\n    return value\n  }\n}\n"]}