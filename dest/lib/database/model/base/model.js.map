{"version":3,"sources":["../src/lib/database/model/base/model.ts"],"names":[],"mappings":"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","file":"model.js","sourcesContent":["/**\n * houston/src/lib/database/model/base/model.ts\n * A basic master model inherited by everything\n */\n\nimport * as Knex from 'knex'\nimport { camelCase, isArray } from 'lodash'\nimport * as uuid from 'uuid/v4'\n\nimport { Database } from '../../database'\nimport { Query } from './query'\n\n/**\n * Model\n * A basic master model to be inherited by other models\n *\n * @property {string} id - The record's ID\n *\n * @property {Date} createdAt - The date the record was created at\n * @property {Date} updatedAt - The date the record was last updated\n * @property {Date} [deletedAt] - The date the record may have been deleted\n */\nexport class Model {\n\n  /**\n   * table\n   * The table name for the current model\n   *\n   * @var {string}\n   */\n  public static table: string\n\n  public id: string\n\n  public createdAt: Date\n  public updatedAt: Date\n  public deletedAt?: Date|null\n\n  /**\n   * exists\n   * If this record already exists in the database\n   *\n   * @var {boolean}\n   */\n  protected exists = false\n\n  /**\n   * guarded\n   * All properties that should not be included when put to object or json\n   *\n   * @var {string[]}\n   */\n  protected guarded: string[] = []\n\n  /**\n   * createId\n   * Creates a new UUID for use in the model.\n   *\n   * @return {string}\n   */\n  public static createId (): string {\n    return uuid()\n  }\n\n  /**\n   * castFromDatabase\n   * Takes values from the database to create a model\n   *\n   * @param {object} values - Values from the database\n   * @return {Model}\n   */\n  public static castFromDatabase (values: object) {\n    const cammelCasedValues = {}\n\n    Object.keys(values).forEach((key) => {\n      cammelCasedValues[camelCase(key)] = values[key]\n    })\n\n    // Date converting all of the `xxxxAt` columns\n    Object.keys(cammelCasedValues)\n      .filter((key) => key.endsWith('At'))\n      .filter((key) => (cammelCasedValues[key] != null))\n      .forEach((key) => {\n        cammelCasedValues[key] = new Date(cammelCasedValues[key])\n      })\n\n    const record = new this(cammelCasedValues)\n\n    record.exists = true\n\n    return record\n  }\n\n  /**\n   * query\n   * This is a super master query function so we can put data in a model\n   *\n   * @param {Database} database - The database to query\n   * @return {Query}\n   */\n  public static query (database: Database): Query {\n    return (new Query(database))\n      .setModel(Model)\n      .from(Model.table)\n  }\n\n  /**\n   * Creates a Model class\n   *\n   * @param {object} [values] - Initial values to be set\n   */\n  constructor (values?: object) {\n    if (values != null) {\n      Object.keys(values).forEach((key) => {\n        this[camelCase(key)] = values[key]\n      })\n    }\n\n    if (this.id == null) {\n      this.id = Model.createId()\n    }\n\n    if (this.createdAt == null) {\n      this.createdAt = new Date()\n    }\n\n    if (this.updatedAt == null) {\n      this.updatedAt = new Date()\n    }\n  }\n\n  /**\n   * isDeleted\n   * Tells if the record has been soft deleted or not\n   *\n   * @return {boolean}\n   */\n  public get isDeleted (): boolean {\n    if (this.deletedAt == null) {\n      return false\n    }\n\n    return true\n  }\n\n  /**\n   * isDeleted\n   * Sets the deleted at date\n   *\n   * @param {boolean} value - True if the record should be deleted\n   * @return {void}\n   */\n  public set isDeleted (value: boolean) {\n    if (value === true) {\n      this.deletedAt = new Date()\n    } else {\n      this.deletedAt = null\n    }\n  }\n\n  /**\n   * toObject\n   * Transforms the current model to a plain object\n   *\n   * @return {object}\n   */\n  public toObject () {\n    const res = {}\n\n    Object.getOwnPropertyNames(this).forEach((key) => {\n      if (this.guarded.indexOf(key) === -1) {\n        res[key] = this[key]\n      }\n    })\n\n    return res\n  }\n\n  /**\n   * toJson\n   * Transforms the current model to a json value\n   *\n   * @return {string}\n   */\n  public toJson () {\n    return JSON.stringify(this.toObject())\n  }\n}\n"]}