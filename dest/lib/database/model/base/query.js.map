{"version":3,"sources":["../src/lib/database/model/base/query.ts"],"names":[],"mappings":";AAAA;;;GAGG;;AAEH,kDAAiD;AAKjD,WAAmB,SAAQ,OAAO;IAgBhC;;;;OAIG;IACH,YAAa,QAAkB;QAC7B,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;QAE3B,OAAO,IAAI,CAAA;IACb,CAAC;IAED;;;;;OAKG;IACI,QAAQ,CAAE,KAAK;QACpB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAA;QAElB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA;QAEtB,OAAO,IAAI,CAAA;IACb,CAAC;IAED;;;;OAIG;IACI,IAAI,CAAE,SAAS,EAAE,QAAQ;QAC9B,IAAI,CAAC,MAAM;aACR,MAAM,CAAC,IAAI,CAAC;aACZ,GAAG,EAAE;aACL,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE;YAChB,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,EAAE;gBACtB,OAAO,OAAO,CAAA;aACf;YAED,IAAI,OAAO,IAAI,IAAI,EAAE;gBACnB,OAAO,IAAI,CAAA;aACZ;YAED,IAAI,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;gBAC1B,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,CAAA;aACpE;iBAAM;gBACL,OAAO,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAA;aAC5C;QACH,CAAC,CAAC;aACD,IAAI,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAA;IAC9B,CAAC;CAEF;AApED,sBAoEC","file":"query.js","sourcesContent":["/**\n * houston/src/lib/database/model/base/query.ts\n * Sets up some cool methods and overwrites then function for casting to model\n */\n\nimport * as Builder from 'knex/lib/query/builder'\n\nimport { Database } from '../../database'\nimport { Model } from './model'\n\nexport class Query extends Builder {\n\n  /**\n   * A database client instance to use\n   *\n   * @var {Database}\n   */\n  protected database: Database\n\n  /**\n   * Model to cast to when query is finished\n   *\n   * @var {ModelConstructor}\n   */\n  protected model\n\n  /**\n   * Creates a new Query instance\n   *\n   * @param {Database} database\n   */\n  constructor (database: Database) {\n    super(database.knex.client)\n\n    return this\n  }\n\n  /**\n   * Sets the castFromDatabase function for the query\n   *\n   * @param {ModelConstructor} model\n   * @return {Query}\n   */\n  public setModel (model) {\n    this.model = model\n\n    this.from(model.table)\n\n    return this\n  }\n\n  /**\n   * Sets up the query, runs it, then casts it to a model\n   *\n   * @return {Model|Model[]|Object|null}\n   */\n  public then (onResolve, onReject) {\n    this.client\n      .runner(this)\n      .run()\n      .then((results) => {\n        if (this.model == null) {\n          return results\n        }\n\n        if (results == null) {\n          return null\n        }\n\n        if (Array.isArray(results)) {\n          return results.map((result) => this.model.castFromDatabase(result))\n        } else {\n          return this.model.castFromDatabase(results)\n        }\n      })\n      .then(onResolve, onReject)\n  }\n\n}\n"]}