{"version":3,"sources":["../src/lib/queue/type.ts"],"names":[],"mappings":";AAAA;;;GAGG","file":"type.js","sourcesContent":["/**\n * houston/src/lib/queue/type.ts\n * Some typescript types for a queue system.\n */\n\nimport { EventEmitter } from 'events'\n\nexport type Status = 'waiting' | 'active' | 'completed' | 'failed' | 'delayed'\n\nexport type HandleCallback = (job: IJob) => Promise<object>\n\nexport type OnActiveCallback = (job: IJob) => void\nexport type OnProgressCallback = (job: IJob, amount: number) => void\nexport type OnFailedCallback = (job: IJob, error: Error) => void\nexport type OnCompletedCallback = (job: IJob, result: object) => void\n\nexport type IQueueConstructor = (name: string) => IQueue\n\nexport interface IQueue {\n  send (data: object, opts?: IJobOptions): Promise<IJob>\n  handle (fn: HandleCallback)\n\n  pause (local: boolean): Promise<void>\n  resume (local: boolean): Promise<void>\n\n  empty (): Promise<void>\n  close (): Promise<void>\n  count (state?: Status): Promise<number>\n  jobs (state: Status): Promise<IJob[]>\n\n  onActive (fn: OnActiveCallback)\n  onProgress (fn: OnProgressCallback)\n  onFailed (fn: OnFailedCallback)\n  onCompleted (fn: OnCompletedCallback)\n}\n\nexport interface IJobOptions {\n  priority?: number\n  delay?: number\n  attempts?: number\n  timeout?: number\n}\n\nexport interface IJob {\n  status (): Promise<Status>\n  progress (amount: number)\n\n  remove (): Promise<void>\n}\n"]}