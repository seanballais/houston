{"version":3,"sources":["../src/lib/queue/provider.ts"],"names":[],"mappings":";AAAA;;;GAGG;;AAEH,yCAAuD;AAEvD,sCAAkC;AAClC,mCAA4C;AAC5C,6CAAuD;AAG1C,QAAA,QAAQ,GAAG,IAAI,2BAAe,CAAC,CAAC,IAAI,EAAE,EAAE;IACnD,IAAI,CAAoB,aAAK,CAAC,CAAC,SAAS,CAAS,CAAC,OAA2B,EAAE,EAAE;QAC/E,OAAO,sBAAuB,IAAY;YACxC,MAAM,MAAM,GAAG,OAAO,CAAC,SAAS,CAAC,GAAG,CAAS,eAAM,CAAC,CAAA;YAEpD,IAAI,MAAM,CAAC,GAAG,CAAC,cAAc,CAAC,KAAK,OAAO,EAAE;gBAC1C,IAAI;oBACF,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAA;iBACxB;gBAAC,OAAO,CAAC,EAAE;oBACV,MAAM,IAAI,KAAK,CAAC,qDAAqD,CAAC,CAAA;iBACvE;gBAED,OAAO,IAAI,aAAU,CAAC,MAAM,EAAE,IAAI,CAAC,CAAA;aACpC;YAED,IAAI,MAAM,CAAC,GAAG,CAAC,cAAc,CAAC,KAAK,KAAK,EAAE;gBACxC,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAA;aAC9C;iBAAM;gBACL,MAAM,IAAI,KAAK,CAAC,4BAA4B,MAAM,CAAC,GAAG,CAAC,cAAc,CAAC,cAAc,CAAC,CAAA;aACtF;QACH,CAAC,CAAA;IACH,CAAC,CAAC,CAAA;IAEF,IAAI,CAAS,mBAAW,CAAC,CAAC,cAAc,CAAC,CAAC,OAA2B,EAAE,EAAE;QACvE,MAAM,gBAAgB,GAAG,OAAO,CAAC,SAAS,CAAC,GAAG,CAAoB,aAAK,CAAC,CAAA;QAExE,OAAO,gBAAgB,CAAC,aAAa,CAAC,CAAA;IACxC,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","file":"provider.js","sourcesContent":["/**\n * houston/src/lib/queue/provider.ts\n * Sets up the needed providers for the Queue system\n */\n\nimport { ContainerModule, interfaces } from 'inversify'\n\nimport { Config } from '../config'\nimport { Queue, workerQueue } from './index'\nimport { Queue as RedisQueue } from './providers/redis'\nimport { IQueue, IQueueConstructor } from './type'\n\nexport const provider = new ContainerModule((bind) => {\n  bind<IQueueConstructor>(Queue).toFactory<IQueue>((context: interfaces.Context) => {\n    return function QueueFactory (name: string) {\n      const config = context.container.get<Config>(Config)\n\n      if (config.get('queue.client') === 'redis') {\n        try {\n          require.resolve('bull')\n        } catch (e) {\n          throw new Error('Package \"bull\" is not installed. Please install it.')\n        }\n\n        return new RedisQueue(config, name)\n      }\n\n      if (config.has('queue.client') === false) {\n        throw new Error('No queue client configured')\n      } else {\n        throw new Error(`Unknown queue client of \"${config.get('queue.client')}\" configured`)\n      }\n    }\n  })\n\n  bind<IQueue>(workerQueue).toDynamicValue((context: interfaces.Context) => {\n    const queueConstructor = context.container.get<IQueueConstructor>(Queue)\n\n    return queueConstructor('WorkerQueue')\n  })\n})\n"]}