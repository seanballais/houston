{"version":3,"sources":["../src/lib/log/logger.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;;;;;;;;;;;;AAEH,yCAA2D;AAE3D,sCAAkC;AAClC,mCAA4C;AAC5C,+BAA2B;AAE3B,qCAAoC;AAEpC;;;GAGG;AAEH,IAAa,MAAM,GAAnB;IAgBE;;;;OAIG;IACH,YAAoC,MAAc;QAZlD;;;;WAIG;QACO,YAAO,GAAa,EAAE,CAAA;QAQ9B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAA;QAEpB,iEAAiE;QACjE,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;IACpE,CAAC;IAED;;;;OAIG;IACI,MAAM;QACX,OAAO,IAAI,SAAG,CAAC,IAAI,CAAC,CAAA;IACtB,CAAC;IAED;;;;;OAKG;IACI,KAAK,CAAE,OAAe;QAC3B,OAAO,IAAI,CAAC,MAAM,EAAE;aACjB,QAAQ,CAAC,aAAK,CAAC,KAAK,CAAC;aACrB,UAAU,CAAC,OAAO,CAAC,CAAA;IACxB,CAAC;IAED;;;;;OAKG;IACI,IAAI,CAAE,OAAe;QAC1B,OAAO,IAAI,CAAC,MAAM,EAAE;aACjB,QAAQ,CAAC,aAAK,CAAC,IAAI,CAAC;aACpB,UAAU,CAAC,OAAO,CAAC,CAAA;IACxB,CAAC;IAED;;;;;OAKG;IACI,IAAI,CAAE,OAAe;QAC1B,OAAO,IAAI,CAAC,MAAM,EAAE;aACjB,QAAQ,CAAC,aAAK,CAAC,IAAI,CAAC;aACpB,UAAU,CAAC,OAAO,CAAC,CAAA;IACxB,CAAC;IAED;;;;;OAKG;IACI,KAAK,CAAE,OAAe;QAC3B,OAAO,IAAI,CAAC,MAAM,EAAE;aACjB,QAAQ,CAAC,aAAK,CAAC,KAAK,CAAC;aACrB,UAAU,CAAC,OAAO,CAAC,CAAA;IACxB,CAAC;IAED;;;;OAIG;IACI,IAAI,CAAE,GAAQ;QACnB,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;YAC9B,MAAM,CAAC,mBAAW,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;QACrC,CAAC,CAAC,CAAA;IACJ,CAAC;IAED;;;;;OAKG;IACO,WAAW,CAAE,SAA4B;QACjD,IAAI,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;YAClC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAA;SAC9C;QAED,OAAO,IAAI,CAAA;IACb,CAAC;IAED;;;;;OAKG;IACO,YAAY,CAAE,UAA+B;QACrD,UAAU,CAAC,OAAO,CAAC,CAAC,SAAS,EAAE,EAAE;YAC/B,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAA;QAC7B,CAAC,CAAC,CAAA;QAEF,OAAO,IAAI,CAAA;IACb,CAAC;CACF,CAAA;AA3HY,MAAM;IADlB,sBAAU,EAAE;IAsBU,WAAA,kBAAM,CAAC,eAAM,CAAC,CAAA;qCAAS,eAAM;GArBvC,MAAM,CA2HlB;AA3HY,wBAAM","file":"logger.js","sourcesContent":["/**\n * houston/src/lib/log/logger.ts\n * A manager of logs and third party logging services.\n */\n\nimport { inject, injectable, multiInject } from 'inversify'\n\nimport { Config } from '../config'\nimport { Level, levelString } from './level'\nimport { Log } from './log'\nimport { Output, OutputConstructor } from './output'\nimport * as outputs from './outputs'\n\n/**\n * Log\n * A manager of logs and third party logging services\n */\n@injectable()\nexport class Logger {\n\n  /**\n   * The configuration to use\n   *\n   * @var {Config}\n   */\n  protected config: Config\n\n  /**\n   * A list of outputs that we will use when a log gets sent\n   *\n   * @var {Output[]}\n   */\n  protected outputs: Output[] = []\n\n  /**\n   * Creates a new logger\n   *\n   * @param {Config} config\n   */\n  public constructor (@inject(Config) config: Config) {\n    this.config = config\n\n    // TODO: At some point we can replace this with `Object.values()`\n    this.setupOutputs(Object.keys(outputs).map((key) => outputs[key]))\n  }\n\n  /**\n   * Creates a new log\n   *\n   * @return {Log}\n   */\n  public create (): Log {\n    return new Log(this)\n  }\n\n  /**\n   * Creates a new debug log\n   *\n   * @param {String} message\n   * @return {Log}\n   */\n  public debug (message: string): Log {\n    return this.create()\n      .setLevel(Level.DEBUG)\n      .setMessage(message)\n  }\n\n  /**\n   * Creates a new info log\n   *\n   * @param {String} message\n   * @return {Log}\n   */\n  public info (message: string): Log {\n    return this.create()\n      .setLevel(Level.INFO)\n      .setMessage(message)\n  }\n\n  /**\n   * Creates a new warn log\n   *\n   * @param {String} message\n   * @return {Log}\n   */\n  public warn (message: string): Log {\n    return this.create()\n      .setLevel(Level.WARN)\n      .setMessage(message)\n  }\n\n  /**\n   * Creates a new error log\n   *\n   * @param {String} message\n   * @return {Log}\n   */\n  public error (message: string): Log {\n    return this.create()\n      .setLevel(Level.ERROR)\n      .setMessage(message)\n  }\n\n  /**\n   * Does things with a finished log.\n   *\n   * @param {Log} log\n   */\n  public send (log: Log) {\n    this.outputs.forEach((output) => {\n      output[levelString(log.level)](log)\n    })\n  }\n\n  /**\n   * Sets up an output for the logger\n   *\n   * @param {OutputConstructor} outputter\n   * @return {Logger}\n   */\n  protected setupOutput (outputter: OutputConstructor): this {\n    if (outputter.enabled(this.config)) {\n      this.outputs.push(new outputter(this.config))\n    }\n\n    return this\n  }\n\n  /**\n   * Given an array of outputters, we try to set them up\n   *\n   * @param {OutputConstructor[]} outputters\n   * @return {Logger}\n   */\n  protected setupOutputs (outputters: OutputConstructor[]): this {\n    outputters.forEach((outputter) => {\n      this.setupOutput(outputter)\n    })\n\n    return this\n  }\n}\n"]}