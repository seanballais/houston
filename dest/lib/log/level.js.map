{"version":3,"sources":["../src/lib/log/level.ts"],"names":[],"mappings":";AAAA;;;GAGG;;AAEH;;;;GAIG;AACU,QAAA,KAAK,GAAG,MAAM,EAAE,CAAA;AAE7B;;;;GAIG;AACU,QAAA,IAAI,GAAG,MAAM,EAAE,CAAA;AAE5B;;;;GAIG;AACU,QAAA,IAAI,GAAG,MAAM,EAAE,CAAA;AAE5B;;;;GAIG;AACU,QAAA,KAAK,GAAG,MAAM,EAAE,CAAA;AAE7B;;;;GAIG;AACH,IAAY,KAAkC;AAA9C,WAAY,KAAK;IAAG,mCAAK,CAAA;IAAE,iCAAI,CAAA;IAAE,iCAAI,CAAA;IAAE,mCAAK,CAAA;AAAC,CAAC,EAAlC,KAAK,GAAL,aAAK,KAAL,aAAK,QAA6B;AAE9C;;;;;GAKG;AACH,oBAA4B,KAAa;IACvC,QAAQ,KAAK,CAAC,WAAW,EAAE,CAAC,IAAI,EAAE,EAAE;QAClC,KAAK,CAAC,OAAO,CAAC;YACZ,OAAO,KAAK,CAAC,KAAK,CAAA;QACpB,KAAK,CAAC,MAAM,CAAC;YACX,OAAO,KAAK,CAAC,IAAI,CAAA;QACnB,KAAK,CAAC,MAAM,CAAC;YACX,OAAO,KAAK,CAAC,IAAI,CAAA;QACnB,KAAK,CAAC,OAAO,CAAC;YACZ,OAAO,KAAK,CAAC,KAAK,CAAA;QACpB;YACE,OAAO,KAAK,CAAC,IAAI,CAAA;KACpB;AACH,CAAC;AAbD,gCAaC;AAED;;;;;GAKG;AACH,qBAA6B,KAAY;IACvC,QAAQ,KAAK,EAAE;QACb,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC;YAChB,OAAO,OAAO,CAAA;QAChB,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC;YACf,OAAO,MAAM,CAAA;QACf,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC;YACf,OAAO,MAAM,CAAA;QACf,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC;YAChB,OAAO,OAAO,CAAA;QAChB;YACE,OAAO,MAAM,CAAA;KAChB;AACH,CAAC;AAbD,kCAaC;AAED;;;;;GAKG;AACH,oBAA4B,KAAY;IACtC,QAAQ,KAAK,EAAE;QACb,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC;YAChB,OAAO,CAAC,CAAA;QACV,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC;YACf,OAAO,CAAC,CAAA;QACV,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC;YACf,OAAO,CAAC,CAAA;QACV,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC;YAChB,OAAO,CAAC,CAAA;QACV;YACE,OAAO,CAAC,CAAA;KACX;AACH,CAAC;AAbD,gCAaC","file":"level.js","sourcesContent":["/**\n * houston/src/lib/log/level.ts\n * Some log levels\n */\n\n/**\n * The debug level of logs\n *\n * @var {Symbol}\n */\nexport const DEBUG = Symbol()\n\n/**\n * The info level of logs\n *\n * @var {Symbol}\n */\nexport const INFO = Symbol()\n\n/**\n * The warn level of logs\n *\n * @var {Symbol}\n */\nexport const WARN = Symbol()\n\n/**\n * The error level of logs\n *\n * @var {Symbol}\n */\nexport const ERROR = Symbol()\n\n/**\n * An enum representing all of the log levels\n *\n * @var {enum}\n */\nexport enum Level { DEBUG, INFO, WARN, ERROR }\n\n/**\n * Parses a string value for a level symbol\n *\n * @param {string} level\n * @return {Level}\n */\nexport function parseLevel (level: string): Level {\n  switch (level.toLowerCase().trim()) {\n    case ('debug'):\n      return Level.DEBUG\n    case ('info'):\n      return Level.INFO\n    case ('warn'):\n      return Level.WARN\n    case ('error'):\n      return Level.ERROR\n    default:\n      return Level.INFO\n  }\n}\n\n/**\n * Returns a string given a level symbol\n *\n * @param {Level} level\n * @return {string}\n */\nexport function levelString (level: Level): string {\n  switch (level) {\n    case (Level.DEBUG):\n      return 'debug'\n    case (Level.INFO):\n      return 'info'\n    case (Level.WARN):\n      return 'warn'\n    case (Level.ERROR):\n      return 'error'\n    default:\n      return 'info'\n  }\n}\n\n/**\n * Returns a number index of severity for a level symbol\n *\n * @param {Level} level\n * @return {Number}\n */\nexport function levelIndex (level: Level): number {\n  switch (level) {\n    case (Level.DEBUG):\n      return 0\n    case (Level.INFO):\n      return 1\n    case (Level.WARN):\n      return 2\n    case (Level.ERROR):\n      return 3\n    default:\n      return 1\n  }\n}\n"]}