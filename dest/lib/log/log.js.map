{"version":3,"sources":["../src/lib/log/log.ts"],"names":[],"mappings":";AAAA;;;;;GAKG;;;;;;;;;;;AAEH,yCAAsC;AAEtC,mCAA+B;AAC/B,qCAAiC;AAEjC;;;GAGG;AAEH,IAAa,GAAG,GAAhB;IA4CE;;;;OAIG;IACH,YAAoB,MAAc;QAChC,IAAI,CAAC,KAAK,GAAG,aAAK,CAAC,KAAK,CAAA;QACxB,IAAI,CAAC,IAAI,GAAG,EAAE,CAAA;QACd,IAAI,CAAC,IAAI,GAAG,IAAI,IAAI,EAAE,CAAA;QAEtB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAA;IACtB,CAAC;IAED;;;;;;OAMG;IACI,QAAQ,CAAE,KAAY;QAC3B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAA;QAElB,OAAO,IAAI,CAAA;IACb,CAAC;IAED;;;;;;OAMG;IACI,UAAU,CAAE,OAAe;QAChC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAA;QAEtB,OAAO,IAAI,CAAA;IACb,CAAC;IAED;;;;;;;OAOG;IACI,OAAO,CAAE,GAAW,EAAE,KAAK;QAChC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,KAAK,CAAA;QAEtB,OAAO,IAAI,CAAA;IACb,CAAC;IAED;;;;;;OAMG;IACI,QAAQ,CAAE,GAAU;QACzB,IAAI,CAAC,KAAK,GAAG,GAAG,CAAA;QAEhB,OAAO,IAAI,CAAA;IACb,CAAC;IAED;;;;OAIG;IACI,OAAO;QACZ,OAAO,IAAI,CAAC,IAAI,CAAA;IAClB,CAAC;IAED;;;;OAIG;IACI,IAAI;QACT,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;IAC/B,CAAC;CACF,CAAA;AA/HY,GAAG;IADf,sBAAU,EAAE;qCAkDiB,eAAM;GAjDvB,GAAG,CA+Hf;AA/HY,kBAAG","file":"log.js","sourcesContent":["/**\n * houston/src/lib/log/log.ts\n * A log message with super powers.\n *\n * @exports {Class} Log - A single log line.\n */\n\nimport { injectable } from 'inversify'\n\nimport { Level } from './level'\nimport { Logger } from './logger'\n\n/**\n * Log\n * A single log line.\n */\n@injectable()\nexport class Log {\n\n  /**\n   * The level of the log\n   *\n   * @var {Level}\n   */\n  public level: Level\n\n  /**\n   * The log message\n   *\n   * @var {String|Null}\n   */\n  public message?: string\n\n  /**\n   * Attached data to the log\n   *\n   * @var {Object}\n   */\n  public data: object\n\n  /**\n   * An error attached to the log\n   *\n   * @var {Error}\n   */\n  public error?: Error\n\n  /**\n   * The date the log was created\n   *\n   * @var {Date}\n   */\n  protected date: Date\n\n  /**\n   * The current logger to use for sending the log.\n   *\n   * @var {Logger}\n   */\n  protected logger: Logger\n\n  /**\n   * Creates a new log with default values\n   *\n   * @param {Logger} logger\n   */\n  public constructor (logger: Logger) {\n    this.level = Level.DEBUG\n    this.data = {}\n    this.date = new Date()\n\n    this.logger = logger\n  }\n\n  /**\n   * Sets the log level\n   *\n   * @param {Level} level\n   *\n   * @return {Log}\n   */\n  public setLevel (level: Level): this {\n    this.level = level\n\n    return this\n  }\n\n  /**\n   * Sets the log message\n   *\n   * @param {String} message\n   *\n   * @return {Log}\n   */\n  public setMessage (message: string): this {\n    this.message = message\n\n    return this\n  }\n\n  /**\n   * Sets data in the log\n   *\n   * @param {String} key\n   * @param {*} value\n   *\n   * @return {Log}\n   */\n  public setData (key: string, value): this {\n    this.data[key] = value\n\n    return this\n  }\n\n  /**\n   * A shorthand for attaching an error message to a log\n   *\n   * @param {Error} err\n   *\n   * @return {Log}\n   */\n  public setError (err: Error): this {\n    this.error = err\n\n    return this\n  }\n\n  /**\n   * Gets the date this log was created.\n   *\n   * @return {Date}\n   */\n  public getDate (): Date {\n    return this.date\n  }\n\n  /**\n   * Sends the log to what ever services / places it needs to be.\n   *\n   * @return {void}\n   */\n  public send () {\n    return this.logger.send(this)\n  }\n}\n"]}