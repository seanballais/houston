{"version":3,"sources":["../src/lib/log/provider.ts"],"names":[],"mappings":";AAAA;;;GAGG;;AAEH,yCAA2C;AAE3C,+BAA2B;AAC3B,qCAAiC;AACjC,qCAAiC;AACjC,+CAA2C;AAC3C,6CAAyC;AAE5B,QAAA,QAAQ,GAAG,IAAI,2BAAe,CAAC,CAAC,IAAI,EAAE,EAAE;IACnD,IAAI,CAAS,eAAM,CAAC,CAAC,aAAa,CAAC,iBAAO,CAAC,CAAA;IAC3C,IAAI,CAAS,eAAM,CAAC,CAAC,aAAa,CAAC,eAAM,CAAC,CAAA;IAE1C,IAAI,CAAM,SAAG,CAAC,CAAC,aAAa,CAAC,SAAG,CAAC,CAAA;IAEjC,IAAI,CAAS,eAAM,CAAC,CAAC,MAAM,EAAE,CAAA;AAC/B,CAAC,CAAC,CAAA","file":"provider.js","sourcesContent":["/**\n * houston/src/lib/log/provider.ts\n * Provides the app with the needed Log classes\n */\n\nimport { ContainerModule } from 'inversify'\n\nimport { Log } from './log'\nimport { Logger } from './logger'\nimport { Output } from './output'\nimport { Console } from './outputs/console'\nimport { Sentry } from './outputs/sentry'\n\nexport const provider = new ContainerModule((bind) => {\n  bind<Output>(Output).toConstructor(Console)\n  bind<Output>(Output).toConstructor(Sentry)\n\n  bind<Log>(Log).toConstructor(Log)\n\n  bind<Logger>(Logger).toSelf()\n})\n"]}