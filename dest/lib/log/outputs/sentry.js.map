{"version":3,"sources":["../src/lib/log/outputs/sentry.ts"],"names":[],"mappings":";AAAA;;;GAGG;;AAIH,sCAAkC;AAElC,YAAoB,SAAQ,eAAM;IAuBhC;;;;OAIG;IACI,MAAM,CAAC,OAAO,CAAE,MAAc;QACnC,IAAI,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC,KAAK,KAAK,EAAE;YACtC,OAAO,KAAK,CAAA;SACb;aAAM,IAAI,MAAM,CAAC,GAAG,CAAC,uBAAuB,CAAC,KAAK,KAAK,EAAE;YACxD,OAAO,KAAK,CAAA;SACb;QAED,IAAI;YACF,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,CAAA;SACzB;QAAC,OAAO,CAAC,EAAE;YACV,OAAO,KAAK,CAAA;SACb;QAED,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC,KAAK,OAAO,CAAC,CAAA;IAC/C,CAAC;IAED;;;;OAIG;IACH,YAAoB,MAAc;QAChC,KAAK,CAAC,MAAM,CAAC,CAAA;QAEb,IAAI,CAAC,MAAM,GAAG,MAAM,CAAA;QACpB,IAAI,CAAC,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAA;QAE9C,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,EAAE,CAAA;IAC3B,CAAC;IAED;;;;;OAKG;IACI,KAAK,CAAE,GAAQ;QACpB,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAA;IAChD,CAAC;IAED;;;;;;OAMG;IACI,OAAO,CAAE,GAAQ;QACtB,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAA;QAEpC,+CAA+C;QAC/C,KAAK,CAAC,iBAAiB,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,CAAA;QAC5C,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,GAAG,CAAC,IAAI,EAAE,EAAE,KAAK,EAAE,GAAG,CAAC,KAAK,EAAE,CAAC,CAAA;QAEpD,OAAO,KAAK,CAAA;IACd,CAAC;IAED;;;;OAIG;IACO,KAAK;QACb,OAAO,OAAO,CAAC,OAAO,CAAC;aACpB,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC;aAChB,OAAO,EAAE,CAAA;IACd,CAAC;CACF;AA/FD,wBA+FC","file":"sentry.js","sourcesContent":["/**\n * houston/src/lib/log/services/sentry.ts\n * Handles logging errors to sentry\n */\n\nimport { Config } from '../../config'\nimport { Log } from '../log'\nimport { Output } from '../output'\n\nexport class Sentry extends Output {\n\n  /**\n   * The current application configuration\n   *\n   * @var {Config}\n   */\n  protected config: Config\n\n  /**\n   * The sentry dns to use when reporting logs\n   *\n   * @var {String}\n   */\n  protected dns: string\n\n  /**\n   * A raven instance for logging to sentry\n   *\n   * @var {Raven}\n   */\n  protected raven\n\n  /**\n   * Checks if this output should be enabled\n   *\n   * @return {boolean}\n   */\n  public static enabled (config: Config): boolean {\n    if (config.has('log.sentry') === false) {\n      return false\n    } else if (config.has('service.sentry.secret') === false) {\n      return false\n    }\n\n    try {\n      require.resolve('raven')\n    } catch (e) {\n      return false\n    }\n\n    return (config.get('log.sentry') !== 'never')\n  }\n\n  /**\n   * Creates a new Sentry output\n   *\n   * @param {Config} config\n   */\n  public constructor (config: Config) {\n    super(config)\n\n    this.config = config\n    this.dns = config.get('service.sentry.secret')\n\n    this.raven = this.setup()\n  }\n\n  /**\n   * Sends error logs to sentry\n   *\n   * @param {Log} log\n   * @return {void}\n   */\n  public error (log: Log) {\n    this.raven.captureException(this.toError(log))\n  }\n\n  /**\n   * Transforms a log message to an error\n   *\n   * @param {Log} log\n   *\n   * @return {Error}\n   */\n  public toError (log: Log): Error {\n    const error = new Error(log.message)\n\n    // Add a stack trace no including this function\n    Error.captureStackTrace(error, this.toError)\n    Object.assign(error, log.data, { error: log.error })\n\n    return error\n  }\n\n  /**\n   * Sets up raven with common metadata and things.\n   *\n   * @return {Raven}\n   */\n  protected setup () {\n    return require('raven')\n      .config(this.dns)\n      .install()\n  }\n}\n"]}