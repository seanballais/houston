{"version":3,"sources":["../src/lib/log/outputs/console.ts"],"names":[],"mappings":";AAAA;;;GAGG;;AAMH,oCAA4C;AAE5C,sCAAkC;AAElC,aAAqB,SAAQ,eAAM;IASjC;;;;;;OAMG;IACI,MAAM,CAAC,OAAO,CAAE,MAAc;QACnC,IAAI,MAAM,CAAC,GAAG,CAAC,aAAa,CAAC,KAAK,KAAK,EAAE;YACvC,OAAO,KAAK,CAAA;SACb;QAED,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,aAAa,CAAC,KAAK,OAAO,CAAC,CAAA;IAChD,CAAC;IAED;;;;OAIG;IACH,YAAoB,MAAc;QAChC,KAAK,CAAC,MAAM,CAAC,CAAA;QAEb,IAAI,CAAC,MAAM,GAAG,MAAM,CAAA;IACtB,CAAC;IAED;;;;;OAKG;IACI,KAAK,CAAE,GAAQ;QACpB,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAA;IAC3B,CAAC;IAED;;;;;OAKG;IACI,IAAI,CAAE,GAAQ;QACnB,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAA;IAC3B,CAAC;IAED;;;;;OAKG;IACI,IAAI,CAAE,GAAQ;QACnB,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAA;IAC3B,CAAC;IAED;;;;;OAKG;IACI,KAAK,CAAE,GAAQ;QACpB,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAA;IAC5B,CAAC;IAED;;;;;;OAMG;IACO,MAAM,CAAE,KAAY;QAC5B,IAAI,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,aAAa,CAAC,KAAK,KAAK,EAAE;YAC5C,OAAO,KAAK,CAAA;SACb;QAED,MAAM,WAAW,GAAG,kBAAU,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC,CAAA;QAE9D,IAAI,KAAK,IAAI,WAAW,EAAE;YACxB,OAAO,IAAI,CAAA;SACZ;QAED,OAAO,KAAK,CAAA;IACd,CAAC;CACF;AA/FD,0BA+FC","file":"console.js","sourcesContent":["/**\n * houston/src/lib/log/services/console.ts\n * Outputs logs to the console\n */\n\n// Disabled because this file is all about console logs\n// tslint:disable:no-console\n\nimport { Config } from '../../config'\nimport { Level, parseLevel } from '../level'\nimport { Log } from '../log'\nimport { Output } from '../output'\n\nexport class Console extends Output {\n\n  /**\n   * Configuration to use for console logs.\n   *\n   * @var {Config}\n   */\n  protected config: Config\n\n  /**\n   * Checks if this output should be enabled\n   *\n   * @param {Config} config\n   *\n   * @return {boolean}\n   */\n  public static enabled (config: Config): boolean {\n    if (config.has('log.console') === false) {\n      return false\n    }\n\n    return (config.get('log.console') !== 'never')\n  }\n\n  /**\n   * Creates a new Sentry output\n   *\n   * @param {Config} config\n   */\n  public constructor (config: Config) {\n    super(config)\n\n    this.config = config\n  }\n\n  /**\n   * Sends debug info to the console\n   *\n   * @param {Log} log\n   * @return {void}\n   */\n  public debug (log: Log) {\n    console.info(log.message)\n  }\n\n  /**\n   * Logs a message to the console\n   *\n   * @param {Log} log\n   * @return {void}\n   */\n  public info (log: Log) {\n    console.info(log.message)\n  }\n\n  /**\n   * Logs a warning log to the console\n   *\n   * @param {Log} log\n   * @return {void}\n   */\n  public warn (log: Log) {\n    console.warn(log.message)\n  }\n\n  /**\n   * Logs an error to the console\n   *\n   * @param {Log} log\n   * @return {void}\n   */\n  public error (log: Log) {\n    console.error(log.message)\n  }\n\n  /**\n   * Checks if the configuration allows a given log level.\n   *\n   * @param {Level} level\n   *\n   * @return {Boolean}\n   */\n  protected allows (level: Level) {\n    if (this.config.has('log.console') === false) {\n      return false\n    }\n\n    const configLevel = parseLevel(this.config.get('log.console'))\n\n    if (level >= configLevel) {\n      return true\n    }\n\n    return false\n  }\n}\n"]}