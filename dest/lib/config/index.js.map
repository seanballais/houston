{"version":3,"sources":["../src/lib/config/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["/**\n * houston/src/lib/config/index.ts\n * The application wide configuration class\n *\n * @exports {class} config - Global configuration class\n */\n\nimport { injectable } from 'inversify'\nimport { get, has, isPlainObject, merge, set } from 'lodash'\n\n/**\n * Config\n * An easy to use application wide configuration class\n */\n@injectable()\nexport class Config {\n\n  /**\n   * tree\n   * The current configuration object\n   *\n   * @var {object}\n   */\n  protected tree: object\n\n  /**\n   * immutable\n   * True if we do not allow setting of values anymore\n   *\n   * @var {boolean}\n   */\n  protected immutable: boolean\n\n  /**\n   * freeze\n   * Freezes an object\n   *\n   * @param {object} obj - The object to freeze\n   * @return {object} - A newly frozen object\n   */\n  protected static freeze (obj: object): object {\n    const newObject = {}\n\n    Object.getOwnPropertyNames(obj).forEach((key) => {\n      if (isPlainObject(obj[key])) {\n        newObject[key] = this.freeze(obj[key])\n      } else {\n        newObject[key] = obj[key]\n      }\n    })\n\n    return Object.freeze(newObject)\n  }\n\n  /**\n   * unfreeze\n   * Makes an object unfrozzen and able to accept new values\n   *\n   * @param {object} obj - The object to unfreeze\n   * @return {object} - A new unfrozzen object\n   */\n  protected static unfreeze (obj: object): object {\n    const newObject = {}\n\n    Object.getOwnPropertyNames(obj).forEach((key) => {\n      if (typeof obj[key] === 'object') {\n        newObject[key] = this.unfreeze(obj[key])\n      } else {\n        newObject[key] = obj[key]\n      }\n    })\n\n    return newObject\n  }\n\n  /**\n   * Create a new Config class with the given object\n   *\n   * @param {object} configuration - A basic object to set as config\n   */\n  constructor (configuration: object = {}) {\n    this.tree = configuration\n    this.immutable = false\n  }\n\n  /**\n   * get\n   * Returns a configuration value\n   *\n   * @param {*} key - Key value for the configuration\n   * @param {*} def - The default value if configuration does not exist\n   * @return {*} - The stored configuration value\n   */\n  public get (key, def?) {\n    if (key === '.') {\n      return this.tree\n    }\n\n    if (this.has(key) === false) {\n      return def\n    }\n\n    return get(this.tree, key)\n  }\n\n  /**\n   * has\n   * Returns boolean if value exists in configuration\n   *\n   * @param {string} key - Dot notation path of configuration value\n   * @return {boolean} - True if the configuration has the value\n   */\n  public has (key: string): boolean {\n    return has(this.tree, key)\n  }\n\n  /**\n   * set\n   * Sets a configuration value\n   *\n   * @param {string} key - Key value to store under\n   * @param {*} - The configuration value to store\n   * @return {Config} - The configuration after value was set\n   */\n  public set (key, value): this {\n    if (this.immutable === true) {\n      return this\n    }\n\n    set(this.tree, key, value)\n\n    return this\n  }\n\n  /**\n   * merge\n   * Merges an object with the current configuration\n   *\n   * @param {object} obj - An object to merge in configuration\n   * @return {Config} - The configuration after value was set\n   */\n  public merge (obj: object): this {\n    if (this.immutable === true) {\n      return this\n    }\n\n    merge(this.tree, obj)\n\n    return this\n  }\n\n  /**\n   * freeze\n   * Makes the configuration immutable\n   *\n   * @return {Config} - The configuration after being frozen\n   */\n  public freeze (): this {\n    this.immutable = true\n\n    this.tree = Config.freeze(this.tree)\n\n    return this\n  }\n\n  /**\n   * unfreeze\n   * Makes the configuration editable\n   *\n   * @return {Config} - The configuration after unfrozzen\n   */\n  public unfreeze (): this {\n    this.immutable = false\n    this.tree = Config.unfreeze(this.tree)\n\n    return this\n  }\n}\n"]}