{"version":3,"sources":["../src/lib/config/loader.ts"],"names":[],"mappings":"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","file":"loader.js","sourcesContent":["/**\n * houston/src/lib/config/loader.ts\n * This file is responsible for loading the configuration file.\n *\n * @exports {Function} environmentToDot\n * @exports {Function} findEnvironmentConfig\n * @exports {Function} findProgramConfig\n * @exports {Function} findFileConfig\n */\n\nimport * as fs from 'fs'\nimport * as path from 'path'\n\nimport { Config } from './index'\n\n/**\n * The prefix required for environment variables to be used.\n *\n * @var {string}\n */\nconst environmentPrefix = 'HOUSTON'\n\n/**\n * A list of possible paths the houston configuration file could be.\n *\n * @var {string[]}\n */\nconst configurationPaths = [\n  path.resolve(process.cwd(), 'config.js'),\n  path.resolve('/etc/houston/config.js')\n]\n\n/**\n * stringToDot\n * Transforms an environmental variable name to dot notation.\n *\n * @example `HOUSTON_LOG_LEVEL` to `log.level`\n *\n * @param {string} str - The string to transform\n * @return {string}\n */\nexport function stringToDot (str: string): string {\n  return str\n    .toLowerCase()\n    .split('_')\n    .splice(1)\n    .join('.')\n    .replace('env', 'environment')\n}\n\n/**\n * getEnvironmentConfig\n * Finds all the environment variables set and returns a built config.\n *\n * @return {Config}\n */\nexport function getEnvironmentConfig (): Config {\n  const config = new Config()\n\n  Object.keys(process.env).forEach((key) => {\n    if (key.startsWith(environmentPrefix)) {\n      const name = stringToDot(key)\n\n      const numberValue = Number(process.env[key])\n\n      if (isNaN(numberValue) === false) {\n        config.set(name, numberValue)\n      } else {\n        config.set(name, process.env[key])\n      }\n    }\n  })\n\n  // Some special case variables\n  if (process.env.NODE_ENV != null) {\n    config.set('environment', process.env.NODE_ENV)\n  }\n\n  if (process.env.NODE_DEBUG != null) {\n    config.set('log.console', 'debug')\n  }\n\n  return config.freeze()\n}\n\n/**\n * getProgramConfig\n * Returns a built config with program variables like git commit and package\n * version.\n *\n * @return {Config}\n */\nexport function getProgramConfig (): Config {\n  const config = new Config()\n\n  try {\n    const pkg = require('../../../package.json')\n\n    const [major, minor, patch] = pkg.version.split('-')[0].split('.')\n\n    config.set('houston.version', pkg.version)\n    config.set('houston.major', major)\n    config.set('houston.minor', minor)\n    config.set('houston.patch', patch)\n  } catch (e) {} // tslint:disable-line no-empty\n\n  try {\n    const gitCommitPath = path.resolve(__dirname, '..', '..', '..', '.git', 'ORIG_HEAD')\n    const exists = fs.statSync(gitCommitPath).isFile()\n\n    if (exists === true) {\n      const commit = fs.readFileSync(gitCommitPath, {\n        encoding: 'utf8'\n      }).trim()\n\n      config.set('houston.commit', commit)\n    }\n  } catch (e) {} // tslint:disable-line no-empty\n\n  try {\n    const gitChangePath = path.resolve(__dirname, '..', '..', '..', '.git', 'COMMIT_EDITMSG')\n    const exists = fs.statSync(gitChangePath).isFile()\n\n    if (exists === true) {\n      const change = fs.readFileSync(gitChangePath, {\n        encoding: 'utf8'\n      }).trim()\n\n      config.set('houston.change', change)\n    }\n  } catch (e) {} // tslint:disable-line no-empty\n\n  return config.freeze()\n}\n\n/**\n * getFileConfig\n * Tries to read configuration from a file.\n *\n * @param {string} [p] - The path to the file\n *\n * @throws {Error} - On 404 file not found\n * @return {Config}\n */\nexport function getFileConfig (p?: string): Config {\n  const config = new Config()\n\n  let file = {}\n\n  if (p != null && p.startsWith('/')) {\n    file = require(p) // tslint:disable-line non-literal-require\n  } else if (p != null) {\n    const relativeP = path.resolve(process.cwd(), p)\n\n    file = require(relativeP) // tslint:disable-line non-literal-require\n  } else {\n    // Test for other global config file paths\n    for (const possible of configurationPaths) {\n      try {\n        if (fs.statSync(possible).isFile()) {\n          file = require(possible) // tslint:disable-line non-literal-require\n          break\n        }\n      } catch (e) {} // tslint:disable-line no-empty\n    }\n  }\n\n  return config\n    .merge(file)\n    .freeze()\n}\n\n/**\n * getConfig\n * This creates a Config from all possible places.\n *\n * @param {string} [p] - The path to the configuration file\n *\n * @throws {Error} - On 404 file not found\n * @return {Config}\n */\nexport function getConfig (p?: string): Config {\n  const environment = getEnvironmentConfig()\n  const program = getProgramConfig()\n  const file = getFileConfig(p)\n\n  const config = new Config()\n\n  return config\n    .merge(program.get('.'))\n    .merge(file.get('.'))\n    .merge(environment.get('.'))\n    .freeze()\n}\n"]}