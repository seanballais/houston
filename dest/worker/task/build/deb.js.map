{"version":3,"sources":["../src/worker/task/build/deb.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;;;;;;;;AAEH,+BAA8B;AAC9B,yBAAwB;AACxB,6BAA4B;AAE5B,oDAAgD;AAEhD,yCAAqC;AACrC,mCAA+B;AAE/B,kCAA8B;AAE9B,cAAsB,SAAQ,WAAI;IAEhC;;;;OAIG;IACO,MAAM,KAAK,SAAS;QAC5B,OAAO,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,MAAM,EAAE,EAAE,SAAS,CAAC,CAAA;IAC7C,CAAC;IAED;;;;OAIG;IACH,IAAc,OAAO;QACnB,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,WAAW,CAAC,CAAA;IACzD,CAAC;IAED;;;;OAIG;IACH,IAAc,IAAI;QAChB,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,OAAO,CAAC,CAAA;IACrD,CAAC;IAED;;;;;;OAMG;IACH,IAAc,YAAY;QACxB,QAAQ,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,EAAE;YACxC,KAAK,CAAC,MAAM,CAAC;gBACX,OAAO,QAAQ,CAAA;YACjB,KAAK,CAAC,MAAM,CAAC;gBACX,OAAO,QAAQ,CAAA;YACjB;gBACE,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAA;SAC1C;IACH,CAAC;IAED;;;;;OAKG;IACU,GAAG;;YACd,MAAM,IAAI,CAAC,KAAK,EAAE,CAAA;YAElB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,MAAM,EAAE,CAAA;YAElC,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAA;YAC7C,MAAM,IAAI,GAAG,IAAI,CAAC,YAAY,CAAA;YAC9B,MAAM,GAAG,GAAG,MAAM,IAAI,OAAO,IAAI,kBAAkB,CAAA;YAEnD,4DAA4D;YAC5D,MAAM,IAAI,GAAG,MAAM,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAA;YAExD,IAAI,IAAI,KAAK,CAAC,EAAE;gBACd,MAAM,MAAM,IAAI,CAAC,GAAG,EAAE,CAAA;aACvB;YAED,MAAM,IAAI,CAAC,QAAQ,EAAE,CAAA;QACvB,CAAC;KAAA;IAED;;;;;OAKG;IACa,KAAK;;YACnB,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,OAAO,CAAC,CAAA;YAEzD,MAAM,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;YAC7B,MAAM,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,CAAA;QAChC,CAAC;KAAA;IAED;;;;;;;OAOG;IACa,OAAO;;YACrB,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAA;YAEnC,0BAA0B;YAC1B,MAAM,UAAU,GAAG,GAAG,OAAO,CAAC,UAAU,IAAI,OAAO,CAAC,OAAO,IAAI,OAAO,CAAC,YAAY,IAAI,OAAO,CAAC,aAAa,EAAE,CAAA;YAC9G,MAAM,WAAW,GAAG,MAAM,WAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC,CAAA;YAEnE,IAAI,WAAW,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE;gBAC1B,OAAO,EAAE,IAAI,EAAE,WAAW,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,CAAA;aAC7C;YAED,MAAM,QAAQ,GAAG,MAAM,WAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,OAAO,CAAC,aAAa,EAAE,CAAC,CAAC,CAAA;YAElF,wDAAwD;YACxD,MAAM,aAAa,GAAG,QAAQ;iBAC3B,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,kCAAkC;iBAC/D,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;iBACnC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;iBACzC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAA;YAE5C,IAAI,aAAa,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE;gBAC5B,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,CAAA;aACxE;YAED,4EAA4E;YAC5E,yBAAyB;YACzB,MAAM,WAAW,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,CAAA;YAElE,IAAI,WAAW,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE;gBAC1B,OAAO,EAAE,IAAI,EAAE,WAAW,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,CAAA;aAC7C;QACH,CAAC;KAAA;IAED;;;;;OAKG;IACa,QAAQ;;YACtB,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,OAAO,EAAE,CAAA;YAEhC,IAAI,GAAG,IAAI,IAAI,EAAE;gBACf,MAAM,IAAI,SAAG,CAAC,SAAG,CAAC,KAAK,CAAC,KAAK,EAAE,iDAAiD,CAAC,CAAA;aAClF;YAED,MAAM,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,aAAa,CAAC,CAAA;YAC7D,MAAM,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE,CAAC,CAAA;YAE3B,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,GAAG,EAAE,CAAA;YAEpC,MAAM,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QAC5B,CAAC;KAAA;IAED;;;;;OAKG;IACa,GAAG;;YACjB,MAAM,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAA;YAC3C,MAAM,GAAG,GAAG,MAAM,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAA;YAEnD,OAAO,SAAG,CAAC,QAAQ,CAAC,SAAG,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,EAAE;gBACtC,GAAG;gBACH,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,OAAO;aAC7B,CAAC,CAAA;QACJ,CAAC;KAAA;IAED;;;;;OAKG;IACa,MAAM;;YACpB,MAAM,MAAM,GAAG,IAAI,eAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,WAAW,CAAC,CAAA;YAE1D,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,MAAM,EAAE,CAAA;YACpC,IAAI,MAAM,KAAK,KAAK,EAAE;gBACpB,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,KAAK,CAAC,CAAA;gBAC7C,MAAM,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAA;aAC5B;YAED,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,OAAO,CAAA;YAEzB,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,SAAS,EAAE,oBAAoB,CAAC,CAAA;YACtD,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,cAAc,CAAC,CAAA;YAEvC,OAAO,MAAM,CAAA;QACf,CAAC;KAAA;CACF;AAzLD,4BAyLC","file":"deb.js","sourcesContent":["/**\n * houston/src/worker/task/build/deb.ts\n * Builds a debian package\n */\n\nimport * as fs from 'fs-extra'\nimport * as os from 'os'\nimport * as path from 'path'\n\nimport { glob } from '../../../lib/utility/glob'\nimport render from '../../../lib/utility/template'\nimport { Docker } from '../../docker'\nimport { Log } from '../../log'\nimport { IPackage } from '../../type'\nimport { Task } from '../task'\n\nexport class BuildDeb extends Task {\n\n  /**\n   * Returns the path of the liftoff cache\n   *\n   * @return {string}\n   */\n  protected static get cachePath () {\n    return path.resolve(os.tmpdir(), 'liftoff')\n  }\n\n  /**\n   * Location of the liftoff log\n   *\n   * @return {string}\n   */\n  protected get logPath () {\n    return path.resolve(this.worker.workspace, 'build.log')\n  }\n\n  /**\n   * Location of the directory to build\n   *\n   * @return {string}\n   */\n  protected get path () {\n    return path.resolve(this.worker.workspace, 'build')\n  }\n\n  /**\n   * Returns the liftoff distribution to use.\n   * NOTE: Because liftoff does not know about elementary distros, we map\n   * them to the Ubuntu equivalents\n   *\n   * @return {string}\n   */\n  protected get distribution () {\n    switch (this.worker.context.distribution) {\n      case ('loki'):\n        return 'xenial'\n      case ('juno'):\n        return 'bionic'\n      default:\n        return this.worker.context.distribution\n    }\n  }\n\n  /**\n   * Runs liftoff\n   *\n   * @async\n   * @return {void}\n   */\n  public async run () {\n    await this.setup()\n\n    const docker = await this.docker()\n\n    const arch = this.worker.context.architecture\n    const dist = this.distribution\n    const cmd = `-a ${arch} -d ${dist} -o /tmp/houston`\n\n    // Liftoff uses chroot, so we need higher permissions to run\n    const exit = await docker.run(cmd, { Privileged: true })\n\n    if (exit !== 0) {\n      throw await this.log()\n    }\n\n    await this.teardown()\n  }\n\n  /**\n   * Ensures the build directory is ready for docker\n   *\n   * @async\n   * @return {void}\n   */\n  protected async setup () {\n    const from = path.resolve(this.worker.workspace, 'clean')\n\n    await fs.ensureDir(this.path)\n    await fs.copy(from, this.path)\n  }\n\n  /**\n   * Returns the first known good package path. Used for when projects make\n   * more than one package. We need to run tests on the main one.\n   * TODO: Do tests on all the packages made\n   *\n   * @async\n   * @return {IPackage|null}\n   */\n  protected async package (): Promise<IPackage|null> {\n    const context = this.worker.context\n\n    // The correct name scheme\n    const domainName = `${context.nameDomain}_${context.version}_${context.architecture}.${context.packageSystem}`\n    const domainNamed = await glob(path.resolve(this.path, domainName))\n\n    if (domainNamed[0] != null) {\n      return { path: domainNamed[0], type: 'deb' }\n    }\n\n    const allNames = await glob(path.resolve(this.path, `*.${context.packageSystem}`))\n\n    // Try to intelligently filter out the _extra_ packages.\n    const filteredNames = allNames\n      .map((n) => path.basename(n)) // The file name without full path\n      .filter((n) => !n.startsWith('lib'))\n      .filter((n) => (n.indexOf('-dev') === -1))\n      .filter((n) => (n.indexOf('-dbg') === -1))\n\n    if (filteredNames[0] != null) {\n      return { path: path.resolve(this.path, filteredNames[0]), type: 'deb' }\n    }\n\n    // So... Last effort, we get all the package files, sort them by length, and\n    // Pick the shortest one.\n    const sortedNames = allNames.sort((a, b) => (a.length - b.length))\n\n    if (sortedNames[0] != null) {\n      return { path: sortedNames[0], type: 'deb' }\n    }\n  }\n\n  /**\n   * Removes the messy build directory after copying the package to workspace\n   *\n   * @async\n   * @return {void}\n   */\n  protected async teardown () {\n    const deb = await this.package()\n\n    if (deb == null) {\n      throw new Log(Log.Level.ERROR, 'Build completed but no Debian package was found')\n    }\n\n    const to = path.resolve(this.worker.workspace, 'package.deb')\n    await fs.copy(deb.path, to)\n\n    this.worker.context.packagePath = to\n\n    await fs.remove(this.path)\n  }\n\n  /**\n   * Formats a liftoff error\n   *\n   * @async\n   * @return {Log}\n   */\n  protected async log () {\n    const p = path.resolve(__dirname, 'deb.md')\n    const log = await fs.readFile(this.logPath, 'utf8')\n\n    return Log.template(Log.Level.ERROR, p, {\n      log,\n      storage: this.worker.context\n    })\n  }\n\n  /**\n   * Returns a docker instance to use for liftoff\n   *\n   * @async\n   * @return {Docker}\n   */\n  protected async docker (): Promise<Docker> {\n    const docker = new Docker(this.worker.config, 'build-deb')\n\n    const exists = await docker.exists()\n    if (exists === false) {\n      const folder = path.resolve(__dirname, 'deb')\n      await docker.create(folder)\n    }\n\n    docker.log = this.logPath\n\n    docker.mount(BuildDeb.cachePath, '/var/cache/liftoff')\n    docker.mount(this.path, '/tmp/houston')\n\n    return docker\n  }\n}\n"]}