{"version":3,"sources":["../src/worker/task/debian/control.ts"],"names":[],"mappings":"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","file":"control.js","sourcesContent":["/**\n * houston/src/worker/task/debian/control.ts\n * Updates, lints, and validates the Debian control file.\n */\n\nimport * as fs from 'fs-extra'\nimport { get, set } from 'lodash'\nimport * as os from 'os'\nimport * as path from 'path'\n\nimport { Log } from '../../log'\nimport { Task } from '../task'\nimport { Parser } from './controlParser'\n\nexport class DebianControl extends Task {\n\n  /**\n   * File location for the debian control file\n   *\n   * @var {string}\n   */\n  public static path = 'debian/control'\n\n  /**\n   * The parser to use when doing stuff to the debian control file\n   *\n   * @var {Parser}\n   */\n  public parser = new Parser(this.path)\n\n  /**\n   * Returns the full path for the debian control file and the current test.\n   *\n   * @return {String}\n   */\n  protected get path () {\n    return path.resolve(this.worker.workspace, 'dirty', DebianControl.path)\n  }\n\n  /**\n   * Checks the Debian control file for errors\n   *\n   * @async\n   * @return {void}\n   */\n  public async run () {\n    const exists = fs.pathExists(this.path)\n    if (exists === false) {\n      throw new Log(Log.Level.ERROR, 'Missing debian control file')\n    }\n\n    // TODO: Disabled Debian parser until we can handle multi package control\n    // Files like the one used by io.elementary.code\n    return\n\n    const data = await this.parser.read()\n\n    this.fill(data)\n\n    const logs = (this.lint(data) || [])\n    const highestLogs = logs.sort((a, b) => (b.level - a.level))\n\n    if (highestLogs.length > 0) {\n      // TODO: Report errors\n    }\n  }\n\n  /**\n   * Fills in missing data.\n   *\n   * @async'\n   * @param {Object} data\n   * @return {void}\n   */\n  protected fill (data: object): void {\n    // Required fields by Debian law\n    this.deepFill(data, 'Source', this.worker.context.nameAppstream)\n    this.deepFill(data, 'Maintainer', `${this.worker.context.nameDeveloper} <appcenter@elementary.io>`)\n    this.deepFill(data, 'Package', this.worker.context.nameDomain)\n\n    // Extra optional fun stuff\n    this.deepFill(data, 'Priority', 'optional')\n    this.deepFill(data, 'Standards-Version', this.worker.context.version)\n  }\n\n  /**\n   * Lints an object representation of the Debian control file.\n   *\n   * @async\n   * @param {Object} data\n   * @return {Log[]}\n   */\n  protected lint (data: object): Log[] {\n    const logs = []\n\n    this.deepAssert(logs, data, 'Source', this.worker.context.nameAppstream, `Source should be \\`${this.worker.context.nameAppstream}\\``)\n\n    this.deepAssert(logs, data, 'Maintainer', null, 'Missing maintainer')\n    this.deepAssert(logs, data, 'Maintainer', /^.*\\s<.*>$/, 'Maintainer should be in the form of `Maintainer Name <maintainer@email.com>`')\n\n    this.deepAssert(logs, data, 'Package', this.worker.context.nameDomain, `Package should be \\`${this.worker.context.nameDomain}\\``)\n\n    return logs\n  }\n\n  /**\n   * Inserts value into object it it does not yet exist\n   *\n   * @param {Object} data\n   * @param {String} key\n   * @param {String|Number} value\n   * @return {void}\n   */\n  protected deepFill (data: object, key: string, value: string|number): void {\n    if (get(data, key) == null) {\n      set(data, key, value)\n    }\n\n    return\n  }\n\n  /**\n   * Asserts a deep value in the debian control file\n   *\n   * @param {Log[]} logs\n   * @param {Object} data\n   * @param {String} key\n   * @param {String|Number|RegExp|Function|null} value\n   * @param {String} [error]\n   * @return {void}\n   */\n  protected deepAssert (logs: Log[], data: object, key: string, value, error = `Assert of ${key} failed`): void {\n    const d = get(data, key)\n\n    let failed = false\n\n    if (typeof value === 'string' || typeof value === 'number') {\n      failed = (d !== value)\n    } else if (value instanceof RegExp) {\n      failed = !value.test(d)\n    } else if (typeof value === 'function') {\n      failed = !value(d)\n    } else if (value == null) {\n      failed = (d == null)\n    } else {\n      throw new Error(`Unknown deepAssert value for \"${value}\"`)\n    }\n\n    if (failed) {\n      const log = new Log(Log.Level.ERROR, 'Debian control linting failed', error)\n\n      logs.push(log)\n    }\n  }\n}\n"]}