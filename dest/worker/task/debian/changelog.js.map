{"version":3,"sources":["../src/worker/task/debian/changelog.ts"],"names":[],"mappings":"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","file":"changelog.js","sourcesContent":["/**\n * houston/src/worker/task/debian/changelog.ts\n * Updates, lints, and validates the Debian changelog file.\n */\n\nimport * as cheerio from 'cheerio'\nimport * as fs from 'fs-extra'\nimport * as os from 'os'\nimport * as path from 'path'\n\nimport markdown from '../../../lib/utility/markdown'\nimport template from '../../../lib/utility/template'\nimport { Log } from '../../log'\nimport { IChange, IContext } from '../../type'\nimport { Task } from '../task'\n\nexport class DebianChangelog extends Task {\n\n  /**\n   * File location for the debian changelog file\n   *\n   * @var {string}\n   */\n  public static path = 'debian/changelog'\n\n  /**\n   * File location for the debian changelog template\n   *\n   * @var {string}\n   */\n  public static templatePath = path.resolve(__dirname, 'changelogTemplate.ejs')\n\n  /**\n   * Returns the string templated version of the changelog\n   *\n   * @async\n   * @param {IContext} context\n   * @return {string}\n   */\n  public static async template (context: IContext): Promise<string> {\n    const changes = await this.getChanges(context.changelog)\n\n    const file = await fs.readFile(this.templatePath, 'utf8')\n    const changelog = template(file, { context, changes })\n\n    return changelog\n      // Trim empty lines of whitespace\n      .replace(/^\\s*$/img, '')\n      .trim()\n  }\n\n  /**\n   * Recursivly gets a list of changes for each changelog item\n   *\n   * @async\n   * @param {Object[]} changelogs\n   * @return {Array[]}\n   */\n  protected static async getChanges (changelogs = []): Promise<string[][]> {\n    const changes = []\n\n    for (const version of changelogs) {\n      changes.push(await this.parseMarkdown(version.changes))\n    }\n\n    return changes\n  }\n\n  /**\n   * Parses a markdown string to find a list of changes\n   *\n   * @param {string} changes\n   * @return {string[]}\n   */\n  protected static async parseMarkdown (changes): Promise<string[]> {\n    const html = markdown(changes)\n    const $ = cheerio.load(html)\n    const values = []\n\n    // A normal list in the markdown\n    if ($('ul').length > 0) {\n      $('ul > li').each(function () {\n        values.push($(this).text())\n      })\n    // Transform paragraphs into the changes\n    } else if ($('p').length > 0) {\n      $('p').each(function () {\n        values.push($(this).text())\n      })\n    }\n\n    if (values.length < 1) {\n      values.push('Version Bump')\n    }\n\n    return values\n  }\n\n  /**\n   * Returns the full path for the debian changelog file and the current test.\n   *\n   * @return {String}\n   */\n  protected get path () {\n    return path.resolve(this.worker.workspace, 'dirty', DebianChangelog.path)\n  }\n\n  /**\n   * Checks the Debian control file for errors\n   *\n   * @async\n   * @return {void}\n   */\n  public async run () {\n    const exists = fs.pathExists(this.path)\n    if (exists === false) {\n      await this.fill()\n    }\n\n    // TODO: Lint?\n  }\n\n  /**\n   * Fills the changelog file with all known changes\n   * TODO: Convert markdown changes to a list\n   *\n   * @return {void}\n   */\n  public async fill () {\n    await fs.ensureFile(this.path)\n\n    if (this.worker.context.changelog.length === 0) {\n      this.worker.context.changelog.push(this.noopChange())\n    }\n\n    const changelog = await DebianChangelog.template(this.worker.context)\n\n    await fs.writeFile(this.path, changelog, 'utf8')\n  }\n\n  /**\n   * Returns a blank change we will insert into the changelog\n   *\n   * @return {Object}\n   */\n  protected noopChange () {\n    return {\n      author: this.worker.context.nameDeveloper,\n      changes: 'Version Bump',\n      date: new Date(),\n      version: this.worker.context.version\n    } as IChange\n  }\n}\n"]}