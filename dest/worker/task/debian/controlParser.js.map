{"version":3,"sources":["../src/worker/task/debian/controlParser.ts"],"names":[],"mappings":"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","file":"controlParser.js","sourcesContent":["/**\n * houston/src/worker/task/debian/controlParser.ts\n * Reads and writes a Debian control file. I whould highly recommend reading the\n * Debian documentation about the Control file before editing too much of this\n * file.\n * @see https://www.debian.org/doc/debian-policy/ch-controlfields.html\n */\n\nimport * as fs from 'fs-extra'\n\n/**\n * All the types a line in the Debian control file can be\n * @see https://www.debian.org/doc/debian-policy/ch-controlfields.html 5.1\n *\n * @var {string}\n */\ntype LineType = 'simple' | 'folded' | 'multiline'\n\nexport class Parser {\n\n  /**\n   * The order that debian control file properties should be in\n   *\n   * @var {string[]}\n   */\n  protected static order = [\n    'Source',\n    'Maintainer',\n    'Section',\n    'Priority',\n    'Standards-Version',\n    'Vcs-Git',\n    'Vcs-Browser',\n    'Homepage',\n    'Build-Depends',\n    'Build-Depends-Indep',\n    'Package',\n    'Architecture',\n    'Depends',\n    'Recommends',\n    'Description'\n  ]\n\n  /**\n   * The location to the file.\n   *\n   * @var {string}\n   */\n  public readonly file: string\n\n  /**\n   * Returns the type of line that is being parsed.\n   *\n   * @param {string} data - The raw string data\n   * @param {number} line - The line to check type\n   * @return {LineType}\n   */\n  private static readLineType (data: string, line = 0): LineType {\n    const lines = data.split('\\n').filter((l) => (l.trim() !== ''))\n\n    const before = (lines[line - 1]) ? lines[line - 1] : ''\n    const current = (lines[line]) ? lines[line] : ''\n    const after = (lines[line + 1]) ? lines[line + 1] : ''\n\n    if (before.trim().endsWith(',') || current.trim().endsWith(',')) {\n      return 'folded'\n    }\n\n    if (current.startsWith(' ') || after.startsWith(' ')) {\n      return 'multiline'\n    }\n\n    return 'simple'\n  }\n\n  /**\n   * Given some JavaScript data, we tell you what type of line to write.\n   *\n   * @param {string|string[]} data - The data to check\n   * @return {LineType}\n   */\n  private static writeLineType (data: string|string[]): LineType {\n    if (Array.isArray(data)) {\n      return 'folded'\n    }\n\n    if (data.indexOf('\\n') !== -1) {\n      return 'multiline'\n    }\n\n    return 'simple'\n  }\n\n  /**\n   * Sorts an object to an array. It's pretty hacky, but we need to keep order.\n   *\n   * @param {Object} data\n   * @return {array}\n   */\n  private static sortProperties (data: object) {\n    return Object.keys(data)\n      .map((key) => [key, data[key]])\n      .sort((a, b) => {\n        const ai = this.order.indexOf(a[0])\n        const bi = this.order.indexOf(b[0])\n\n        if (ai === -1) {\n          return 1\n        } else if (bi === -1) {\n          return -1\n        } else {\n          return ai - bi\n        }\n      })\n  }\n\n  /**\n   * Pads the left side of a string by a length\n   *\n   * @param {string} str\n   * @param {Number} len\n   * @return {string}\n   */\n  private static leftPad (str: string, len: number): string {\n    return ' '.repeat(len) + str\n  }\n\n  /**\n   * Creates a new Parser class\n   *\n   * @param {string} file - The location to the file.\n   */\n  public constructor (file: string) {\n    this.file = file\n  }\n\n  /**\n   * Reads the file and parses it to easy to understand javascript.\n   *\n   * @async\n   * @return {object}\n   */\n  public async read (): Promise<object> {\n    const exists = await fs.pathExists(this.file)\n    if (exists === false) {\n      return {}\n    }\n\n    const output = {}\n    let lastKey: string\n\n    const raw = await fs.readFile(this.file, { encoding: 'utf8' })\n    const lines = raw.split('\\n').filter((l) => (l.trim() !== ''))\n\n    lines.forEach((line, i) => {\n      const type = Parser.readLineType(raw, i)\n\n      if (type === 'simple') {\n        const breakIndex = line.indexOf(':')\n        const key = line.substring(0, breakIndex).trim()\n        const value = line.substring(breakIndex + 1).trim()\n\n        output[key] = value\n        lastKey = key\n        return\n      }\n\n      if (type === 'folded') {\n        const breakIndex = line.indexOf(':')\n        let firstLine = true\n\n        let key: string\n        let value: string\n\n        if (breakIndex !== -1) {\n          key = line.substring(0, breakIndex).trim()\n          value = line.substring(breakIndex + 1).trim()\n        } else {\n          firstLine = false\n\n          key = ''\n          value = line.trim()\n        }\n\n        // Avoid variables with ':' in them looking like fake key values\n        if (key.indexOf('${') !== -1) {\n          firstLine = false\n          value = line.trim()\n        }\n\n        if (value.endsWith(',')) {\n          value = value.slice(0, -1)\n        }\n\n        if (firstLine) {\n          output[key] = [value]\n          lastKey = key\n          return\n        }\n\n        output[lastKey].push(value)\n        output[lastKey].sort()\n      }\n\n      if (type === 'multiline') {\n        const breakIndex = line.indexOf(':')\n\n        if (breakIndex !== -1) {\n          const key = line.substring(0, breakIndex).trim()\n          const value = line.substring(breakIndex + 1).trim()\n\n          output[key] = value\n          lastKey = key\n          return\n        }\n\n        output[lastKey] += `\\n${line.trim()}`\n      }\n    })\n\n    return output\n  }\n\n  /**\n   * Reads the file and parses it to easy to understand javascript.\n   *\n   * @async\n   * @param {object} data - The data to write to file\n   * @return {string}\n   */\n  public async write (data: object): Promise<string> {\n    await fs.ensureFile(this.file)\n\n    let output = ''\n\n    Parser.sortProperties(data).forEach(([key, line]) => {\n      const type = Parser.writeLineType(line)\n\n      switch (type) {\n        case 'folded':\n          output += `${key}: ${line[0]}`\n\n          if (line.length < 2) {\n            break\n          }\n\n          output += ',\\n'\n\n          output += line\n            .slice(1)\n            .map((l) => Parser.leftPad(l, key.length + 2))\n            .join(',\\n')\n\n          output += '\\n\\n'\n          break\n\n        case 'multiline':\n          output += `${key}:`\n\n          output += line\n            .split('\\n')\n            .map((l) => ` ${l}`)\n            .join('\\n')\n\n          output += '\\n'\n          break\n\n        default:\n          output += `${key}: ${line}\\n`\n          break\n      }\n    })\n\n    await fs.writeFile(this.file, output, 'utf8')\n    return output\n  }\n}\n"]}