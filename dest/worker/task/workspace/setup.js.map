{"version":3,"sources":["../src/worker/task/workspace/setup.ts"],"names":[],"mappings":"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","file":"setup.js","sourcesContent":["/**\n * houston/src/worker/task/workspace/setup.ts\n * Fills the workspace with files from git\n */\n\nimport * as fs from 'fs-extra'\nimport { get, set } from 'lodash'\nimport * as os from 'os'\nimport * as path from 'path'\nimport * as uuid from 'uuid/v4'\n\nimport { Log } from '../../log'\nimport { Task } from '../task'\n\nexport class WorkspaceSetup extends Task {\n  /**\n   * Given two lists of strings we can find the first most common string.\n   *\n   * @param {String[]} references\n   * @param {String[]} search - All of the reference parts we are looking for\n   * @return {String[]}\n   */\n  protected static filterRefs (references, search): string[] {\n    // Gets the last part of a git reference \"refs/origin/master\" -> \"master\"\n    const shortReferences = references\n      .map((ref) => ref.split('/').reverse()[0])\n\n    return search\n      .map((ref) => shortReferences.findIndex((short) => (short === ref)))\n      .filter((ref) => (ref !== -1))\n      .map((i) => references[i])\n  }\n\n  /**\n   * Fills the workspace by merging the release and package branches of a repo.\n   *\n   * @async\n   * @return {void}\n   */\n  public async run () {\n    await this.worker.emitAsync(`task:${this.constructor.name}:start`)\n    await fs.ensureDir(this.worker.workspace)\n\n    const branches = await this.branches()\n\n    // Step 1: Download all the needed branches\n    for (let i = 0; i < branches.length; i++) {\n      // TODO: Maybe go and slugify the branch for easier debugging of folders\n      const gitFolder = path.resolve(this.worker.workspace, 'repository', `${i}`)\n      await this.worker.repository.clone(gitFolder, branches[i])\n    }\n\n    // Step 2: Merge the downloaded branches to form a single folder\n    for (let i = 0; i < branches.length; i++) {\n      const from = path.resolve(this.worker.workspace, 'repository', `${i}`)\n      const to = path.resolve(this.worker.workspace, 'clean')\n\n      await fs.copy(from, to, { overwrite: true })\n    }\n\n    // Step 3: Copy pasta to the dirty directory\n    const clean = path.resolve(this.worker.workspace, 'clean')\n    const dirty = path.resolve(this.worker.workspace, 'dirty')\n\n    await fs.ensureDir(clean)\n    await fs.ensureDir(dirty)\n    await fs.copy(clean, dirty)\n\n    // TODO: We need to fork for every build configuration\n    this.worker.context.packageSystem = 'deb'\n\n    // Step 4: Profit\n    await this.worker.emitAsync(`task:${this.constructor.name}:end`)\n  }\n\n  /**\n   * Returns a list of branches to use to make the directory.\n   * The given branch will always be first, followed possibly by a package branch.\n   *\n   * @async\n   * @return {String[]}\n   */\n  protected async branches (): Promise<string[]> {\n    const repositoryReferences = await this.worker.repository.references()\n    console.log('setup refs: ', repositoryReferences)\n\n    const mergableReferences = [\n      `${this.worker.context.distribution}`,\n      `${this.worker.context.packageSystem}-packaging`,\n      `${this.worker.context.packageSystem}-packaging-${this.worker.context.distribution}`\n    ]\n\n    if (this.worker.context.references[0] != null) {\n      const shortBranch = this.worker.context.references[0].split('/').reverse()[0]\n      mergableReferences.push(`${this.worker.context.packageSystem}-packaging-${this.worker.context.distribution}-${shortBranch}`)\n    }\n\n    console.log('wanted refs: ', mergableReferences)\n\n    const packageReferences = WorkspaceSetup.filterRefs(repositoryReferences, mergableReferences)\n    console.log('matching refs: ', packageReferences)\n\n    // Returns a unique array. No dups.\n    return [...new Set([...this.worker.context.references, ...packageReferences])]\n  }\n}\n"]}