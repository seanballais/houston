{"version":3,"sources":["../src/worker/task/desktop/validate.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;;;;;;;;AAEH,+BAA8B;AAC9B,6BAA4B;AAE5B,oDAAgD;AAChD,yCAAqC;AACrC,mCAA+B;AAC/B,kCAA8B;AAE9B,qBAA6B,SAAQ,WAAI;IACvC;;;;OAIG;IACH,IAAW,IAAI;QACb,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,gCAAgC,CAAC,CAAA;IAC9E,CAAC;IAED;;;;;OAKG;IACU,GAAG;;YACd,MAAM,KAAK,GAAG,MAAM,WAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,CAAA;YAEtD,MAAM,QAAQ,GAAG,EAAE,CAAA;YAEnB,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;gBACxB,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAA;gBACpC,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAA;gBAE1C,MAAM,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAA;gBAChD,MAAM,IAAI,GAAG,MAAM,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,CAAA;gBAExC,IAAI,IAAI,KAAK,CAAC,EAAE;oBACd,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;iBACxB;aACF;YAED,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;gBACvB,MAAM,MAAM,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;aAC/B;QACH,CAAC;KAAA;IAED;;;;OAIG;IACO,OAAO,CAAE,IAAY;QAC7B,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,aAAa,IAAI,MAAM,CAAC,CAAA;IACrE,CAAC;IAED;;;;;;OAMG;IACa,GAAG,CAAE,KAAe;;YAClC,MAAM,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,aAAa,CAAC,CAAA;YAChD,MAAM,IAAI,GAAG,EAAE,CAAA;YAEf,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;gBACxB,IAAI,CAAC,IAAI,CAAC,GAAG,MAAM,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,MAAM,CAAC,CAAA;aAC3D;YAED,OAAO,SAAG,CAAC,QAAQ,CAAC,SAAG,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,EAAE;gBACtC,IAAI;gBACJ,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,OAAO;aAC7B,CAAC,CAAA;QACJ,CAAC;KAAA;IAED;;;;;;OAMG;IACa,MAAM,CAAE,IAAY;;YAClC,MAAM,MAAM,GAAG,IAAI,eAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,kBAAkB,CAAC,CAAA;YAEjE,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,MAAM,EAAE,CAAA;YACpC,IAAI,MAAM,KAAK,KAAK,EAAE;gBACpB,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,UAAU,CAAC,CAAA;gBAClD,MAAM,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAA;aAC5B;YAED,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;YAC/B,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,cAAc,CAAC,CAAA;YAEvC,OAAO,MAAM,CAAA;QACf,CAAC;KAAA;CACF;AAzFD,0CAyFC","file":"validate.js","sourcesContent":["/**\n * houston/src/worker/task/appstream/validate.ts\n * Runs desktop files through the `desktop-file-validate` command\n */\n\nimport * as fs from 'fs-extra'\nimport * as path from 'path'\n\nimport { glob } from '../../../lib/utility/glob'\nimport { Docker } from '../../docker'\nimport { Log } from '../../log'\nimport { Task } from '../task'\n\nexport class DesktopValidate extends Task {\n  /**\n   * Path to folder containing the desktop files\n   *\n   * @return {string}\n   */\n  public get path () {\n    return path.resolve(this.worker.workspace, 'package/usr/share/applications')\n  }\n\n  /**\n   * Runs appstream validate with docker\n   *\n   * @async\n   * @return {void}\n   */\n  public async run () {\n    const files = await glob(path.resolve(this.path, '*'))\n\n    const logFiles = []\n\n    for (const file of files) {\n      const fileName = path.basename(file)\n      const docker = await this.docker(fileName)\n\n      const localFile = path.relative(this.path, file)\n      const exit = await docker.run(localFile)\n\n      if (exit !== 0) {\n        logFiles.push(fileName)\n      }\n    }\n\n    if (logFiles.length > 0) {\n      throw await this.log(logFiles)\n    }\n  }\n\n  /**\n   * Location of the desktop log file for the given test file\n   *\n   * @return {string}\n   */\n  protected logPath (file: string) {\n    return path.resolve(this.worker.workspace, `appstream-${file}.log`)\n  }\n\n  /**\n   * Formats the docker log to something we can pass to the user\n   *\n   * @async\n   * @param {string[]} files\n   * @return {Log}\n   */\n  protected async log (files: string[]) {\n    const p = path.resolve(__dirname, 'validate.md')\n    const logs = {}\n\n    for (const file of files) {\n      logs[file] = await fs.readFile(this.logPath(file), 'utf8')\n    }\n\n    return Log.template(Log.Level.ERROR, p, {\n      logs,\n      storage: this.worker.context\n    })\n  }\n\n  /**\n   * Returns a docker instance to use for liftoff\n   *\n   * @async\n   * @param {string} file\n   * @return {Docker}\n   */\n  protected async docker (file: string): Promise<Docker> {\n    const docker = new Docker(this.worker.config, 'desktop-validate')\n\n    const exists = await docker.exists()\n    if (exists === false) {\n      const folder = path.resolve(__dirname, 'validate')\n      await docker.create(folder)\n    }\n\n    docker.log = this.logPath(file)\n    docker.mount(this.path, '/tmp/houston')\n\n    return docker\n  }\n}\n"]}