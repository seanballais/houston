{"version":3,"sources":["../src/worker/task/task.ts"],"names":[],"mappings":";AAAA;;;;;GAKG;;;;;;;;;;AAEH,gCAA4B;AAI5B;IAQE;;;;OAIG;IACH,YAAa,MAAc;QACzB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAA;IACtB,CAAC;IAED;;;;;OAKG;IACU,GAAG;;YACd,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,WAAW,CAAC,IAAI,QAAQ,CAAC,CAAA;YACvD,EAAE;YACF,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,WAAW,CAAC,IAAI,MAAM,CAAC,CAAA;QACvD,CAAC;KAAA;IAED;;;;;OAKG;IACI,MAAM,CAAE,CAAQ;QACrB,0BAA0B;QAC1B,IAAI,CAAC,CAAC,CAAC,YAAY,SAAG,CAAC,EAAE;YACvB,MAAM,GAAG,GAAG,IAAI,SAAG,CAAC,SAAG,CAAC,KAAK,CAAC,KAAK,EAAE,8BAA8B,CAAC;iBACjE,QAAQ,CAAC,CAAC,CAAC,CAAA;YAEd,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAA;YACvB,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAA;SACnB;aAAM;YACL,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;YAErB,IAAI,CAAC,CAAC,KAAK,KAAK,SAAG,CAAC,KAAK,CAAC,KAAK,EAAE;gBAC/B,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAA;aACnB;SACF;QAED,OAAO,IAAI,CAAA;IACb,CAAC;CACF;AArDD,oBAqDC","file":"task.js","sourcesContent":["/**\n * houston/src/worker/task/task.ts\n * Some worker logic.\n *\n * @exports {Class} Task\n */\n\nimport { Log } from '../log'\nimport { ITask, ITaskConstructor } from '../type'\nimport { Worker } from '../worker'\n\nexport class Task implements ITask {\n  /**\n   * The current running worker\n   *\n   * @var {Worker}\n   */\n  public worker: Worker\n\n  /**\n   * Creates a new Task\n   *\n   * @param {Worker} worker\n   */\n  constructor (worker: Worker) {\n    this.worker = worker\n  }\n\n  /**\n   * Does logic.\n   *\n   * @async\n   * @return {void}\n   */\n  public async run () {\n    this.worker.emit(`task:${this.constructor.name}:start`)\n    //\n    this.worker.emit(`task:${this.constructor.name}:end`)\n  }\n\n  /**\n   * Adds a log/error to storage\n   *\n   * @param {Error} e\n   * @return {Task}\n   */\n  public report (e: Error) {\n    // A real error. Not a Log\n    if (!(e instanceof Log)) {\n      const log = new Log(Log.Level.ERROR, 'Internal error while running')\n        .setError(e)\n\n      this.worker.report(log)\n      this.worker.stop()\n    } else {\n      this.worker.report(e)\n\n      if (e.level === Log.Level.ERROR) {\n        this.worker.stop()\n      }\n    }\n\n    return this\n  }\n}\n"]}