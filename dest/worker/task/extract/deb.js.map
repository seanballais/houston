{"version":3,"sources":["../src/worker/task/extract/deb.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;;;;;;;;AAEH,+BAA8B;AAE9B,6BAA4B;AAE5B,yCAAqC;AACrC,mCAA+B;AAC/B,kCAA8B;AAE9B,gBAAwB,SAAQ,WAAI;IAClC;;;;OAIG;IACH,IAAc,IAAI;QAChB,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,SAAS,CAAC,CAAA;IACvD,CAAC;IAED;;;;;OAKG;IACU,GAAG;;YACd,MAAM,IAAI,CAAC,KAAK,EAAE,CAAA;YAElB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAA;YAEvD,mDAAmD;YACnD,MAAM,IAAI,GAAG,MAAM,MAAM,CAAC,GAAG,CAAC,aAAa,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAA;YAElE,IAAI,IAAI,KAAK,CAAC,EAAE;gBACd,MAAM,IAAI,SAAG,CAAC,SAAG,CAAC,KAAK,CAAC,KAAK,EAAE,iCAAiC,CAAC,CAAA;aAClE;QACH,CAAC;KAAA;IAED;;;;;OAKG;IACa,KAAK;;YACnB,MAAM,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QAC/B,CAAC;KAAA;IAED;;;;;;OAMG;IACa,MAAM,CAAE,CAAS;;YAC/B,MAAM,MAAM,GAAG,IAAI,eAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,aAAa,CAAC,CAAA;YAE5D,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,MAAM,EAAE,CAAA;YACpC,IAAI,MAAM,KAAK,KAAK,EAAE;gBACpB,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,KAAK,CAAC,CAAA;gBAC7C,MAAM,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAA;aAC5B;YAED,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,cAAc,CAAC,CAAA;YAEnD,OAAO,MAAM,CAAA;QACf,CAAC;KAAA;CACF;AA3DD,gCA2DC","file":"deb.js","sourcesContent":["/**\n * houston/src/worker/task/extract/deb.ts\n * Extracts a deb package so we can test files\n */\n\nimport * as fs from 'fs-extra'\nimport * as os from 'os'\nimport * as path from 'path'\n\nimport { Docker } from '../../docker'\nimport { Log } from '../../log'\nimport { Task } from '../task'\n\nexport class ExtractDeb extends Task {\n  /**\n   * The directory we will extract the deb file to\n   *\n   * @return {string}\n   */\n  protected get path () {\n    return path.resolve(this.worker.workspace, 'package')\n  }\n\n  /**\n   * Runs liftoff\n   *\n   * @async\n   * @return {void}\n   */\n  public async run () {\n    await this.setup()\n\n    const docker = await this.docker(this.worker.workspace)\n\n    // The extract script will need to chmod root files\n    const exit = await docker.run('extract-deb', { Privileged: true })\n\n    if (exit !== 0) {\n      throw new Log(Log.Level.ERROR, 'Unable to unpack Debian package')\n    }\n  }\n\n  /**\n   * Ensures the extract path is created before we run docker\n   *\n   * @async\n   * @return {void}\n   */\n  protected async setup () {\n    await fs.ensureDir(this.path)\n  }\n\n  /**\n   * Returns a docker instance to use for liftoff\n   *\n   * @async\n   * @param {string} p - Folder to mount for building\n   * @return {Docker}\n   */\n  protected async docker (p: string): Promise<Docker> {\n    const docker = new Docker(this.worker.config, 'extract-deb')\n\n    const exists = await docker.exists()\n    if (exists === false) {\n      const folder = path.resolve(__dirname, 'deb')\n      await docker.create(folder)\n    }\n\n    docker.mount(this.worker.workspace, '/tmp/houston')\n\n    return docker\n  }\n}\n"]}