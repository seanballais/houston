{"version":3,"sources":["../src/worker/task/file/deb/binary.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;;;;;;;;AAEH,+BAA8B;AAC9B,6BAA4B;AAE5B,uDAAmD;AACnD,sCAAkC;AAClC,qCAAiC;AAEjC,mBAA2B,SAAQ,WAAI;IACrC;;;;OAIG;IACH,IAAc,IAAI;QAChB,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,iBAAiB,EAAE,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAA;IAC/F,CAAC;IAED;;;;;OAKG;IACU,GAAG;;YACd,MAAM,MAAM,GAAG,MAAM,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;YAEzC,IAAI,MAAM,KAAK,KAAK,EAAE;gBACpB,MAAM,SAAG,CAAC,QAAQ,CAAC,SAAG,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,WAAW,CAAC,EAAE;oBACxE,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,OAAO;oBAC5B,KAAK,EAAE,MAAM,IAAI,CAAC,KAAK,EAAE;iBAC1B,CAAC,CAAA;aACH;QACH,CAAC;KAAA;IAED;;;;;OAKG;IACa,KAAK;;YACnB,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,SAAS,CAAC,CAAA;YAC3D,MAAM,KAAK,GAAG,MAAM,WAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAA;YAErE,OAAO,KAAK;iBACT,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC;iBAC1D,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC;iBAClD,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAA;QACzC,CAAC;KAAA;CACF;AA1CD,sCA0CC","file":"binary.js","sourcesContent":["/**\n * houston/src/worker/task/file/deb/binary.ts\n * Tests debian packages for needed binary file\n */\n\nimport * as fs from 'fs-extra'\nimport * as path from 'path'\n\nimport { glob } from '../../../../lib/utility/glob'\nimport { Log } from '../../../log'\nimport { Task } from '../../task'\n\nexport class FileDebBinary extends Task {\n  /**\n   * Location of the directory to build\n   *\n   * @return {string}\n   */\n  protected get path () {\n    return path.resolve(this.worker.workspace, 'package/usr/bin', this.worker.context.nameDomain)\n  }\n\n  /**\n   * Runs liftoff\n   *\n   * @async\n   * @return {void}\n   */\n  public async run () {\n    const exists = await fs.exists(this.path)\n\n    if (exists === false) {\n      throw Log.template(Log.Level.ERROR, path.resolve(__dirname, 'binary.md'), {\n        context: this.worker.context,\n        files: await this.files()\n      })\n    }\n  }\n\n  /**\n   * Returns a list of useful files in the package. Filters out custom files\n   *\n   * @async\n   * @return {string[]}\n   */\n  protected async files (): Promise<string[]> {\n    const root = path.resolve(this.worker.workspace, 'package')\n    const files = await glob(path.resolve(root, '**/*'), { nodir: true })\n\n    return files\n      .filter((p) => !p.startsWith(path.resolve(root, 'DEBIAN')))\n      .filter((p) => (p !== path.resolve(root, 'FILES')))\n      .map((p) => p.substring(root.length))\n  }\n}\n"]}