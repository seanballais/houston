{"version":3,"sources":["../src/worker/task/appstream/validate.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;;;;;;;;AAEH,+BAA8B;AAC9B,6BAA4B;AAE5B,yCAAqC;AACrC,mCAA+B;AAC/B,kCAA8B;AAE9B,uBAA+B,SAAQ,WAAI;IACzC;;;;OAIG;IACH,IAAc,OAAO;QACnB,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,eAAe,CAAC,CAAA;IAC7D,CAAC;IAED;;;;OAIG;IACH,IAAW,IAAI;QACb,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,4BAA4B,CAAC,CAAA;IAC1E,CAAC;IAED;;;;;OAKG;IACU,GAAG;;YACd,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,MAAM,EAAE,CAAA;YAElC,MAAM,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,cAAc,CAAA;YAC5D,MAAM,GAAG,GAAG,YAAY,IAAI,aAAa,CAAA;YACzC,MAAM,IAAI,GAAG,MAAM,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;YAElC,IAAI,IAAI,KAAK,CAAC,EAAE;gBACd,MAAM,MAAM,IAAI,CAAC,GAAG,EAAE,CAAA;aACvB;QACH,CAAC;KAAA;IAED;;;;;OAKG;IACa,GAAG;;YACjB,MAAM,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,aAAa,CAAC,CAAA;YAChD,MAAM,GAAG,GAAG,MAAM,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAA;YAEnD,OAAO,SAAG,CAAC,QAAQ,CAAC,SAAG,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,EAAE;gBACtC,GAAG;gBACH,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,OAAO;aAC7B,CAAC,CAAA;QACJ,CAAC;KAAA;IAED;;;;;OAKG;IACa,MAAM;;YACpB,MAAM,MAAM,GAAG,IAAI,eAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,oBAAoB,CAAC,CAAA;YAEnE,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,MAAM,EAAE,CAAA;YACpC,IAAI,MAAM,KAAK,KAAK,EAAE;gBACpB,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,UAAU,CAAC,CAAA;gBAClD,MAAM,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAA;aAC5B;YAED,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,OAAO,CAAA;YAEzB,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,cAAc,CAAC,CAAA;YAEvC,OAAO,MAAM,CAAA;QACf,CAAC;KAAA;CACF;AA1ED,8CA0EC","file":"validate.js","sourcesContent":["/**\n * houston/src/worker/task/appstream/validate.ts\n * Runs appstreamcli to validate appstream file\n */\n\nimport * as fs from 'fs-extra'\nimport * as path from 'path'\n\nimport { Docker } from '../../docker'\nimport { Log } from '../../log'\nimport { Task } from '../task'\n\nexport class AppstreamValidate extends Task {\n  /**\n   * Location of the appstream cli log\n   *\n   * @return {string}\n   */\n  protected get logPath () {\n    return path.resolve(this.worker.workspace, 'appstream.log')\n  }\n\n  /**\n   * Path to folder containing the appstream file\n   *\n   * @return {string}\n   */\n  public get path () {\n    return path.resolve(this.worker.workspace, 'package/usr/share/metainfo')\n  }\n\n  /**\n   * Runs appstream validate with docker\n   *\n   * @async\n   * @return {void}\n   */\n  public async run () {\n    const docker = await this.docker()\n\n    const file = `${this.worker.context.nameDomain}.appdata.xml`\n    const cmd = `validate ${file} --no-color`\n    const exit = await docker.run(cmd)\n\n    if (exit !== 0) {\n      throw await this.log()\n    }\n  }\n\n  /**\n   * Formats the docker log to something we can pass to the user\n   *\n   * @async\n   * @return {Log}\n   */\n  protected async log () {\n    const p = path.resolve(__dirname, 'validate.md')\n    const log = await fs.readFile(this.logPath, 'utf8')\n\n    return Log.template(Log.Level.ERROR, p, {\n      log,\n      storage: this.worker.context\n    })\n  }\n\n  /**\n   * Returns a docker instance to use for liftoff\n   *\n   * @async\n   * @return {Docker}\n   */\n  protected async docker (): Promise<Docker> {\n    const docker = new Docker(this.worker.config, 'appstream-validate')\n\n    const exists = await docker.exists()\n    if (exists === false) {\n      const folder = path.resolve(__dirname, 'validate')\n      await docker.create(folder)\n    }\n\n    docker.log = this.logPath\n\n    docker.mount(this.path, '/tmp/houston')\n\n    return docker\n  }\n}\n"]}