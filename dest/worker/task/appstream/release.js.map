{"version":3,"sources":["../src/worker/task/appstream/release.ts"],"names":[],"mappings":"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","file":"release.js","sourcesContent":["/**\n * houston/src/worker/task/appstream/release.ts\n * Checks and updates the appstream releases section\n */\n\nimport * as cheerio from 'cheerio'\nimport * as fs from 'fs-extra'\nimport * as path from 'path'\nimport * as sanitize from 'sanitize-html'\nimport * as semver from 'semver'\n\nimport markdown from '../../../lib/utility/markdown'\nimport { Log } from '../../log'\nimport { Task } from '../task'\n\nexport class AppstreamRelease extends Task {\n  /**\n   * A list of valid tags for an appstream release\n   *\n   * @var {String[]}\n   */\n  protected static WHITELISTED_TAGS = [\n    'p', 'ul', 'li'\n  ]\n\n  /**\n   * The options needed for cheerio parsing\n   *\n   * @var {object}\n   */\n  protected static CHEERIO_OPTS = {\n    useHtmlParser2: true,\n    xmlMode: true\n  }\n\n  /**\n   * Path the appstream file should exist at\n   *\n   * @return {string}\n   */\n  public get path () {\n    return path.resolve(this.worker.workspace, 'package/usr/share/metainfo', `${this.worker.context.nameDomain}.appdata.xml`)\n  }\n\n  /**\n   * Runs all the appstream tests\n   *\n   * @async\n   * @return {void}\n   */\n  public async run () {\n    const raw = await fs.readFile(this.path)\n    const $ = cheerio.load(raw, AppstreamRelease.CHEERIO_OPTS)\n\n    const releases = $('component > releases')\n\n    // NOTE: We want to allow people to fill this in theirself for translations\n    if (releases.length === 0) {\n      await fs.writeFile(this.path, this.fill($))\n    }\n  }\n\n  /**\n   * Fills in the missing releases section\n   *\n   * @param {Object} $ - cheerio appstream document\n   * @return {string} - The full appstream document after filling releases\n   */\n  protected fill ($) {\n    if ($('component > releases').length === 0) {\n      $('component').append('<releases></releases>')\n    }\n\n    this.worker.context.changelog\n      .sort((a, b) => semver.rcompare(a.version, b.version))\n      .forEach((change) => {\n        $('component > releases').prepend('<release></release>')\n        const release = $('component > releases > release:last-of-type')\n\n        release.attr('version', change.version)\n        release.attr('date', change.date.toISOString())\n        release.attr('urgency', this.urgency(change.changes))\n        release.html(`<description>${this.html(change.changes)}</description>`)\n      })\n\n    return $.xml()\n  }\n\n  /**\n   * Parses a markdown changelog to find an urgency of the release\n   *\n   * @param {String} change\n   * @return {String} - \"low\" \"medium\" \"high\" or \"critical\". \"medium\" is default\n   */\n  protected urgency (change) {\n    const grepable = change\n      .toLowerCase()\n      .replace(/\\W\\s/img, '')\n      .replace(/\\s+/img, ' ')\n\n    const CRITICAL_WORDS = [\n      'security', 'critical'\n    ]\n\n    CRITICAL_WORDS.forEach((word) => {\n      if (grepable.indexOf(word) !== -1) {\n        return 'critical'\n      }\n    })\n\n    return 'medium'\n  }\n\n  /**\n   * Converts a markdown changelog to something appstream can deal with\n   *\n   * @param {String} change\n   * @return {String}\n   */\n  protected html (change) {\n    const html = markdown(change)\n    const $ = cheerio.load(html, AppstreamRelease.CHEERIO_OPTS)\n\n    const lists = $('ul')\n    const paragraphs = $('p')\n\n    if (lists.length === 0 && paragraphs.length === 1) {\n      const items = paragraphs.text().split('\\n').join('</li><li>')\n      $.root().html(`<ul><li>${items}</li></ul>`)\n    }\n\n    return this.sanitize($.xml())\n  }\n\n  /**\n   * Sanitizes the html input to only allowed valid appstream tags\n   *\n   * @param {String} change\n   * @return {String}\n   */\n  protected sanitize (change) {\n    const $el = cheerio.load(change, AppstreamRelease.CHEERIO_OPTS)\n\n    const sanitized = sanitize($el.xml(), {\n      allowedTags: AppstreamRelease.WHITELISTED_TAGS,\n      parser: AppstreamRelease.CHEERIO_OPTS\n    })\n\n    return cheerio.load(sanitized, AppstreamRelease.CHEERIO_OPTS).xml()\n  }\n}\n"]}