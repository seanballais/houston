{"version":3,"sources":["../src/worker/task/appstream/screenshot.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;;;;;;;;AAEH,mCAAkC;AAClC,+BAA8B;AAC9B,6BAA4B;AAE5B,mCAA+B;AAC/B,kCAA8B;AAE9B,yBAAiC,SAAQ,WAAI;IAE3C;;;;OAIG;IACH,IAAW,IAAI;QACb,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,4BAA4B,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,cAAc,CAAC,CAAA;IAC3H,CAAC;IAED;;;;;OAKG;IACU,GAAG;;YACd,MAAM,GAAG,GAAG,MAAM,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;YACxC,MAAM,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAA;YAE9C,MAAM,WAAW,GAAG,CAAC,CAAC,sCAAsC,CAAC,CAAA;YAE7D,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC1B,MAAM,IAAI,SAAG,CAAC,SAAG,CAAC,KAAK,CAAC,KAAK,EAAE,qBAAqB,CAAC,CAAA;aACtD;YAED,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAA;QACvD,CAAC;KAAA;IAED;;;;;OAKG;IACO,QAAQ,CAAE,CAAC,EAAE,IAAI;QACzB,MAAM,UAAU,GAAG,CAAC,CAAC,IAAI,CAAC,CAAA;QAC1B,MAAM,KAAK,GAAG,CAAC,CAAC,OAAO,EAAE,UAAU,CAAC,CAAA;QAEpC,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;YACtB,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,SAAG,CAAC,SAAG,CAAC,KAAK,CAAC,KAAK,EAAE,iCAAiC,CAAC,CAAC,CAAA;SAChF;IACH,CAAC;CACF;AA5CD,kDA4CC","file":"screenshot.js","sourcesContent":["/**\n * houston/src/worker/task/appstream/screenshot.ts\n * Ensures the developer includes a screenshot\n */\n\nimport * as cheerio from 'cheerio'\nimport * as fs from 'fs-extra'\nimport * as path from 'path'\n\nimport { Log } from '../../log'\nimport { Task } from '../task'\n\nexport class AppstreamScreenshot extends Task {\n\n  /**\n   * Path the appstream file should exist at\n   *\n   * @return {string}\n   */\n  public get path () {\n    return path.resolve(this.worker.workspace, 'package/usr/share/metainfo', `${this.worker.context.nameDomain}.appdata.xml`)\n  }\n\n  /**\n   * Runs all the appstream tests\n   *\n   * @async\n   * @return {void}\n   */\n  public async run () {\n    const raw = await fs.readFile(this.path)\n    const $ = cheerio.load(raw, { xmlMode: true })\n\n    const screenshots = $('component > screenshots > screenshot')\n\n    if (screenshots.length < 1) {\n      throw new Log(Log.Level.ERROR, 'Missing screenshots')\n    }\n\n    screenshots.each((i, elem) => this.checkTag($, elem))\n  }\n\n  /**\n   * Checks a screenshot tag in appstream file\n   *\n   * @param {Object} elem - Cheerio element\n   * @return {void}\n   */\n  protected checkTag ($, elem) {\n    const screenshot = $(elem)\n    const image = $('image', screenshot)\n\n    if (image.length !== 1) {\n      this.worker.report(new Log(Log.Level.ERROR, 'Missing image tag in screenshot'))\n    }\n  }\n}\n"]}