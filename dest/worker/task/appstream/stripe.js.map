{"version":3,"sources":["../src/worker/task/appstream/stripe.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;;;;;;;;AAEH,mCAAkC;AAClC,+BAA8B;AAC9B,6BAA4B;AAG5B,kCAA8B;AAE9B,qBAA6B,SAAQ,WAAI;IAEvC;;;;OAIG;IACH,IAAW,IAAI;QACb,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,4BAA4B,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,cAAc,CAAC,CAAA;IAC3H,CAAC;IAED;;;;;OAKG;IACU,GAAG;;YACd,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,IAAI,IAAI,EAAE;gBACtC,OAAM;aACP;YAED,MAAM,GAAG,GAAG,MAAM,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;YACxC,MAAM,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAA;YAE9C,IAAI,CAAC,CAAC,oBAAoB,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE;gBACxC,CAAC,CAAC,WAAW,CAAC,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAA;aAC3C;YAED,CAAC,CAAC,oBAAoB,CAAC,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAA;YAEjD,MAAM,GAAG,GAAG,CAAC,CAAC,yCAAyC,CAAC,CAAA;YAExD,GAAG,CAAC,IAAI,CAAC,KAAK,EAAE,oBAAoB,CAAC,CAAA;YACrC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAA;YAEpC,MAAM,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAA;QACxC,CAAC;KAAA;CACF;AAtCD,0CAsCC","file":"stripe.js","sourcesContent":["/**\n * houston/src/worker/task/appstream/stripe.ts\n * Adds stripe data to appstream file\n */\n\nimport * as cheerio from 'cheerio'\nimport * as fs from 'fs-extra'\nimport * as path from 'path'\n\nimport { Log } from '../../log'\nimport { Task } from '../task'\n\nexport class AppstreamStripe extends Task {\n\n  /**\n   * Path the appstream file should exist at\n   *\n   * @return {string}\n   */\n  public get path () {\n    return path.resolve(this.worker.workspace, 'package/usr/share/metainfo', `${this.worker.context.nameDomain}.appdata.xml`)\n  }\n\n  /**\n   * Runs all the appstream tests\n   *\n   * @async\n   * @return {void}\n   */\n  public async run () {\n    if (this.worker.context.stripe == null) {\n      return\n    }\n\n    const raw = await fs.readFile(this.path)\n    const $ = cheerio.load(raw, { xmlMode: true })\n\n    if ($('component > custom').length === 0) {\n      $('component').append('<custom></custom>')\n    }\n\n    $('component > custom').append('<value></value>')\n\n    const $el = $('component > custom > value:last-of-type')\n\n    $el.attr('key', 'x-appcenter-stripe')\n    $el.text(this.worker.context.stripe)\n\n    await fs.writeFile(this.path, $.xml())\n  }\n}\n"]}