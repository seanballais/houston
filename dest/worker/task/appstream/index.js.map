{"version":3,"sources":["../src/worker/task/appstream/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["/**\n * houston/src/worker/task/appstream/index.ts\n * Runs a bunch of appstream tests\n * TODO: Only reports error and warn logs instead of all\n */\n\nimport * as fs from 'fs-extra'\nimport * as path from 'path'\n\nimport { Log } from '../../log'\nimport { WrapperTask } from '../wrapperTask'\n\nimport { AppstreamContentRating } from './content-rating'\nimport { AppstreamDescription } from './description'\nimport { AppstreamId } from './id'\nimport { AppstreamLicense } from './license'\nimport { AppstreamName } from './name'\nimport { AppstreamRelease } from './release'\nimport { AppstreamScreenshot } from './screenshot'\nimport { AppstreamStripe } from './stripe'\nimport { AppstreamSummary } from './summary'\nimport { AppstreamValidate } from './validate'\n\nexport class Appstream extends WrapperTask {\n  /**\n   * All of the fun tests we should run on the appstream file\n   *\n   * @var {Task[]}\n   */\n  public get tasks () {\n    switch (this.worker.context.type) {\n      // System apps will never have a stripe key\n      case 'system-app':\n        return [\n          AppstreamId,\n          AppstreamName,\n          AppstreamDescription,\n          AppstreamSummary,\n          AppstreamLicense,\n          AppstreamScreenshot,\n          AppstreamContentRating,\n          AppstreamRelease,\n          AppstreamValidate\n        ]\n\n      default:\n        return [\n          AppstreamId,\n          AppstreamName,\n          AppstreamDescription,\n          AppstreamSummary,\n          AppstreamLicense,\n          AppstreamScreenshot,\n          AppstreamContentRating,\n          AppstreamRelease,\n          AppstreamStripe,\n          AppstreamValidate\n        ]\n    }\n  }\n\n  /**\n   * Path the appstream file should exist at\n   *\n   * @return {string}\n   */\n  public get path () {\n    return path.resolve(this.worker.workspace, 'package/usr/share/metainfo', `${this.worker.context.nameDomain}.appdata.xml`)\n  }\n\n  /**\n   * All of the error logs that do not have a body\n   *\n   * @return {Log[]}\n   */\n  public get errorPartials () {\n    return this.logs\n      .filter((l) => (l.level === Log.Level.ERROR))\n      .filter((l) => (l.body == null))\n  }\n\n  /**\n   * All of the warn logs that do not have a body\n   *\n   * @return {Log[]}\n   */\n  public get warnPartials () {\n    return this.logs\n      .filter((l) => (l.level === Log.Level.WARN))\n      .filter((l) => (l.body == null))\n  }\n\n  /**\n   * Runs all the appstream tests\n   *\n   * @async\n   * @return {void}\n   */\n  public async run () {\n    const exists = await fs.exists(this.path)\n    if (exists === false) {\n      const template = path.resolve(__dirname, 'exist.md')\n\n      throw Log.template(Log.Level.ERROR, template, {\n        storage: this.worker.context\n      })\n    }\n\n    await this.runTasks()\n\n    // All logs that don't have a body get put to a single easy to read log\n    if (this.errorPartials.length > 0 || this.warnPartials.length > 0) {\n      this.concatLogs()\n    }\n\n    // All logs that already have a body should be submitted up the stack\n    this.logs\n      .filter((l) => (l.body != null))\n      .forEach((l) => this.worker.report(l))\n\n    if (this.errorLogs.length > 0) {\n      this.worker.stop()\n    }\n\n    // Save the appstream information\n    this.worker.context.appstream = await fs.readFile(this.path)\n  }\n\n  /**\n   * Concats any logs that don't have a body to a markdown template for easier\n   * looking to the developer.\n   *\n   * @return {void}\n   */\n  protected concatLogs () {\n    const topLevel = (this.errorPartials.length > 0)\n      ? Log.Level.ERROR\n      : Log.Level.WARN\n\n    const template = path.resolve(__dirname, 'index.md')\n\n    const log = Log.template(topLevel, template, {\n      errors: this.errorPartials,\n      storage: this.worker.context,\n      warnings: this.warnPartials\n    })\n\n    this.worker.report(log)\n  }\n}\n"]}