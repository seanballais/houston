{"version":3,"sources":["../src/worker/docker.ts"],"names":[],"mappings":"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","file":"docker.js","sourcesContent":["/**\n * houston/src/worker/docker.ts\n * A helpful class for using docker.\n *\n * @exports {Class} Docker - A helpful class for using docker.\n */\n\nimport * as Dockerode from 'dockerode'\nimport * as fs from 'fs-extra'\nimport * as Stream from 'stream'\n\nimport { Config } from '../lib/config'\n\nexport class Docker {\n\n  /**\n   * log\n   * The file to log to when running the container\n   *\n   * @var {string}\n   */\n  public log?: string\n\n  /**\n   * config\n   * The configuration to use for connecting to docker\n   *\n   * @var {Config}\n   */\n  protected config: Config\n\n  /**\n   * docker\n   * The dockerode instance\n   *\n   * @var {Dockerode}\n   */\n  protected docker: Dockerode\n\n  /**\n   * name\n   * The docker image name to use\n   *\n   * @var {string}\n   */\n  protected name: string\n\n  /**\n   * tag\n   * The docker image tag\n   */\n  protected tag = 'latest'\n\n  /**\n   * mounts\n   * All of the directories that will be mounted on the container.\n   * NOTE: Key is local folder, value is container folder.\n   *\n   * @var {object}\n   */\n  protected mounts = {}\n\n  /**\n   * Creates a new docker container class\n   *\n   * @param {Config} config - The configuration to use\n   * @param {string} name - The docker image to use\n   */\n  constructor (config: Config, name: string) {\n    this.config = config\n    this.docker = new Dockerode(config.get('docker'))\n\n    this.name = `houston-${name}`\n  }\n\n  /**\n   * options\n   * All of the docker options that will get passed on running the container.\n   *\n   * @return {object}\n   */\n  public get options () {\n    const options = {\n      Binds: [] as string[]\n    }\n\n    Object.keys(this.mounts).forEach((local) => {\n      options.Binds.push(`${local}:${this.mounts[local]}:rw`)\n    })\n\n    return options\n  }\n\n  /**\n   * mount\n   * Adds a mount point to the container\n   *\n   * @param {string} from - The local directory to attach\n   * @param {string} to - The container directory to mount to\n   * @return {Docker}\n   */\n  public mount (from: string, to: string): this {\n    this.mounts[from] = to\n\n    return this\n  }\n\n  /**\n   * exists\n   * Checks if the image currently exists.\n   *\n   * @async\n   * @param {string} tag - Docker image tag to check for\n   * @return {boolean}\n   */\n  public async exists (tag = this.tag): Promise<boolean> {\n    const images = await this.docker.listImages()\n\n    const foundImages = images.filter((image) => {\n      if (image.RepoTags == null) {\n        return false\n      }\n\n      let found = false\n\n      image.RepoTags.forEach((imageTag) => {\n        if (imageTag === `${this.name}:${tag}`) {\n          found = true\n        }\n      })\n\n      return found\n    })\n\n    return (foundImages.length !== 0)\n  }\n\n  /**\n   * create\n   * Creates a docker image from a directory of files.\n   *\n   * @async\n   * @param {string} folder - The folder to create the image from\n   * @return {void}\n   */\n  public async create (folder: string): Promise<void> {\n    const files = await fs.readdir(folder)\n\n    await new Promise((resolve, reject) => {\n      this.docker.buildImage({\n        context: folder,\n        src: files\n      }, { t: this.name }, (err, stream) => {\n        if (err != null) {\n          return reject(err)\n        }\n\n        this.docker.modem.followProgress(stream, resolve)\n      })\n    })\n  }\n\n  /**\n   * run\n   * Runs a container with the given command and mounts\n   *\n   * @param {string} cmd - Command to run\n   * @param {object} [opts] - Additional options to pass to container\n   * @return {number} - Container exit code\n   */\n  public async run (cmd: string, opts = {}): Promise<number> {\n    const log = await this.setupLog()\n    const commands = cmd.split(' ')\n    const options = Object.assign({}, this.options, opts)\n\n    const container = await this.docker.run(this.name, commands, log, options)\n\n    await container.remove()\n    return container.output.StatusCode\n  }\n\n  /**\n   * setupLog\n   * Creates / Clears the log file\n   *\n   * @async\n   * @return {Stream|null}\n   */\n  protected async setupLog (): Promise<Stream|null> {\n    if (this.log == null) {\n      return null\n    }\n\n    await fs.ensureFile(this.log)\n    return fs.createWriteStream(this.log)\n  }\n}\n"]}