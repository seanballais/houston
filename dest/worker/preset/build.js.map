{"version":3,"sources":["../src/worker/preset/build.ts"],"names":[],"mappings":";AAAA;;;GAGG;;AAKH,sCAAkC;AAElC,iDAA6C;AAC7C,2CAA4C;AAC5C,wDAA0D;AAC1D,oDAAsD;AACtD,6CAAyC;AACzC,6CAAgD;AAChD,0CAA0C;AAC1C,0CAA0C;AAC1C,mDAAwD;AAExD,oBAAqB,CAAY;IAC/B,QAAQ,CAAC,EAAE;QACT,KAAK,SAAS;YACZ,OAAO;gBACL,sBAAc;gBACd,2BAAe;gBACf,uBAAa;gBACb,cAAQ;aACT,CAAA;QACH;YACE,OAAO;gBACL,sBAAc;gBACd,2BAAe;gBACf,uBAAa;gBACb,cAAQ;gBACR,gBAAU;gBACV,aAAO;gBACP,qBAAS;gBACT,iBAAO;gBACP,aAAO;aACR,CAAA;KACJ;AACH,CAAC;AAED,eAAuB,MAAc,EAAE,UAAsB,EAAE,OAAsB;IACnF,MAAM,MAAM,GAAG,IAAI,eAAM,CAAC,MAAM,EAAE,UAAU,EAAE,OAAO,CAAC,CAAA;IAEtD,KAAK,MAAM,IAAI,IAAI,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;QAC3C,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;KACxB;IAED,OAAO,MAAM,CAAA;AACf,CAAC;AARD,sBAQC","file":"build.js","sourcesContent":["/**\n * houston/src/worker/preset/build.ts\n * Builds a package and edits contents for appcenter.\n */\n\nimport { Config } from '../../lib/config'\nimport { Repository } from '../../lib/service/base/repository'\nimport * as type from '../type'\nimport { Worker } from '../worker'\n\nimport { Appstream } from '../task/appstream'\nimport { BuildDeb } from '../task/build/deb'\nimport { DebianChangelog } from '../task/debian/changelog'\nimport { DebianControl } from '../task/debian/control'\nimport { Desktop } from '../task/desktop'\nimport { ExtractDeb } from '../task/extract/deb'\nimport { FileDeb } from '../task/file/deb'\nimport { PackDeb } from '../task/pack/deb'\nimport { WorkspaceSetup } from '../task/workspace/setup'\n\nfunction buildTasks (t: type.Type): type.ITaskConstructor[] {\n  switch (t) {\n    case 'library':\n      return [\n        WorkspaceSetup,\n        DebianChangelog,\n        DebianControl,\n        BuildDeb\n      ]\n    default:\n      return [\n        WorkspaceSetup,\n        DebianChangelog,\n        DebianControl,\n        BuildDeb,\n        ExtractDeb,\n        FileDeb,\n        Appstream,\n        Desktop,\n        PackDeb\n      ]\n  }\n}\n\nexport function Build (config: Config, repository: Repository, context: type.IContext) {\n  const worker = new Worker(config, repository, context)\n\n  for (const task of buildTasks(context.type)) {\n    worker.tasks.push(task)\n  }\n\n  return worker\n}\n"]}