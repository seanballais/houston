{"version":3,"sources":["../src/worker/log.ts"],"names":[],"mappings":";AAAA;;;GAGG;;AAEH,+BAA8B;AAE9B,4CAAwC;AACxC,sDAA4C;AAG5C,SAAiB,SAAQ,KAAK;IA6D5B;;;;;;OAMG;IACH,YAAa,KAAY,EAAE,KAAa,EAAE,IAAa;QACrD,KAAK,CAAC,KAAK,CAAC,CAAA;QAEZ,IAAI,CAAC,KAAK,GAAG,KAAK,CAAA;QAClB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAA;QAClB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAA;IAClB,CAAC;IAtCD;;;;;;;;OAQG;IACI,MAAM,CAAC,QAAQ,CAAE,KAAY,EAAE,IAAY,EAAE,IAAI,GAAG,EAAE;QAC3D,MAAM,QAAQ,GAAG,EAAE,CAAC,YAAY,CAAC,IAAI,EAAE,MAAM,CAAC,CAAA;QAC9C,MAAM,GAAG,GAAG,kBAAM,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAA;QAElC,IAAI,KAAK,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAA;QAC5C,wEAAwE;QACxE,yEAAyE;QACzE,IAAI,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;YACzB,KAAK,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAA;SAC3B;QAED,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,CAAA;QAE9D,OAAO,IAAI,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,CAAA;IACpC,CAAC;IAiBD;;;;;OAKG;IACI,QAAQ,CAAE,KAAY;QAC3B,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC,OAAO,CAAA;QAC5B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAA;QAElB,OAAO,IAAI,CAAA;IACb,CAAC;IAED;;;;;OAKG;IACI,QAAQ;QACb,MAAM,GAAG,GAAG,EAAE,CAAA;QAEd,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,EAAE;YACrB,MAAM,YAAY,GAAG,IAAI,CAAC,IAAI;iBAC3B,KAAK,CAAC,IAAI,CAAC;iBACX,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC,CAAA;YAEvB,GAAG,CAAC,IAAI,CAAC,GAAG,YAAY,CAAC,CAAA;SAC1B;aAAM;YACL,MAAM,aAAa,GAAG,IAAI,CAAC,KAAK;iBAC7B,KAAK,CAAC,IAAI,CAAC;iBACX,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC,CAAA;YAEvB,GAAG,CAAC,IAAI,CAAC,GAAG,aAAa,CAAC,CAAA;SAC3B;QAED,OAAO,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;IACvB,CAAC;;AAhHD;;;;GAIG;AACW,SAAK,GAAG,aAAK,CAAA;AAN7B,kBAkHC","file":"log.js","sourcesContent":["/**\n * houston/src/worker/log.ts\n * A log to be passed around during a worker role\n */\n\nimport * as fs from 'fs-extra'\n\nimport { Level } from '../lib/log/level'\nimport render from '../lib/utility/template'\nimport { ILog } from './type'\n\nexport class Log extends Error implements ILog {\n  /**\n   * A handy level assignment for easier usage\n   *\n   * @var {Level}\n   */\n  public static Level = Level\n\n  /**\n   * The log title\n   *\n   * @var {string}\n   */\n  public title: string\n\n  /**\n   * The log body\n   *\n   * @var {string|null}\n   */\n  public body?: string\n\n  /**\n   * The severity of the log\n   *\n   * @var {LogLevel}\n   */\n  public level: Level\n\n  /**\n   * A wrapped native error\n   *\n   * @var {Error|null}\n   */\n  public error?: Error\n\n  /**\n   * Creates a new log from a file. This will take the first non-whitespace line\n   * as the title, and the rest as the Log body\n   *\n   * @param {Level} level\n   * @param {string} path\n   * @param {object} [data]\n   * @return {Log}\n   */\n  public static template (level: Level, path: string, data = {}): Log {\n    const template = fs.readFileSync(path, 'utf8')\n    const raw = render(template, data)\n\n    let title = raw.trim().split('\\n')[0].trim()\n    // Most issues start with an h1 markdown header. It's easier to read and\n    // Edit, but it's not supported in most repos as the title is plain text.\n    if (title.startsWith('#')) {\n      title = title.substring(2)\n    }\n\n    const body = raw.trim().split('\\n').slice(1).join('\\n').trim()\n\n    return new Log(level, title, body)\n  }\n\n  /**\n   * Creates a new Log\n   *\n   * @param {Level} level\n   * @param {string} title\n   * @param {string} [body]\n   */\n  constructor (level: Level, title: string, body?: string) {\n    super(title)\n\n    this.level = level\n    this.title = title\n    this.body = body\n  }\n\n  /**\n   * Wraps an error in the current Log\n   *\n   * @param {Error} error\n   * @return {Log}\n   */\n  public setError (error: Error): Log {\n    this.message = error.message\n    this.error = error\n\n    return this\n  }\n\n  /**\n   * Returns a nice string version of the log\n   * BUG: This should override the default node `Error.toString()`\n   *\n   * @return {string}\n   */\n  public toString () {\n    const out = []\n\n    if (this.body != null) {\n      const bodyIndented = this.body\n        .split('\\n')\n        .map((l) => `  ${l}`)\n\n      out.push(...bodyIndented)\n    } else {\n      const stackIndented = this.stack\n        .split('\\n')\n        .map((l) => `  ${l}`)\n\n      out.push(...stackIndented)\n    }\n\n    return out.join('\\n')\n  }\n}\n"]}