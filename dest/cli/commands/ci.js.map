{"version":3,"sources":["../src/cli/commands/ci.ts"],"names":[],"mappings":"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","file":"ci.js","sourcesContent":["/**\n * houston/src/cli/commands/ci.ts\n * Tests a project with the worker. Used when a code base is local.\n */\n\n// Command line files are allowed to have console log statements\n// tslint:disable no-console\n\nimport * as fs from 'fs-extra'\nimport * as path from 'path'\nimport * as semver from 'semver'\n\nimport { Config } from '../../lib/config'\nimport { levelIndex } from '../../lib/log/level'\nimport { sanitize } from '../../lib/service/rdnn'\nimport { create as createRepository } from '../../lib/service/repository'\nimport { Build } from '../../worker/preset/build'\nimport { IContext } from '../../worker/type'\nimport { Worker } from '../../worker/worker'\nimport { setup } from '../utilities'\n\nexport const command = 'ci [directory]'\nexport const describe = 'Tests a local project with the worker process'\n\nconst SLUG = process.env.TRAVIS_REPO_SLUG\nconst REPO = `https://github.com/${SLUG}`\nconst BRANCH = process.env.TRAVIS_BRANCH\n\nexport const builder = (yargs) => {\n    return yargs\n      .positional('directory', {\n        coerce: (v) => path.resolve(process.cwd(), v),\n        default: '.',\n        describe: 'The project directory to build',\n        type: 'string'\n      })\n      .option('type', {\n        choices: ['app', 'system-app', 'library'],\n        default: 'app',\n        describe: 'The type of project',\n        type: 'string'\n      })\n      .option('repo', {\n        ...(SLUG != null) ? { default: REPO } : {},\n        demandOption: true,\n        describe: 'Full repository URL',\n        type: 'string'\n      })\n      .option('version', {\n        coerce: semver.valid,\n        default: '0.0.1',\n        describe: 'Semver version to build for',\n        type: 'string'\n      })\n      .option('architecture', {\n        default: 'amd64',\n        describe: 'Architecture to build for',\n        type: 'string'\n      })\n      .option('distribution', {\n        default: 'loki',\n        describe: 'Distribution to build for',\n        type: 'string'\n      })\n      .option('name-appstream', {\n        coerce: sanitize,\n        describe: 'AppStream id',\n        type: 'string'\n      })\n      .option('name-developer', {\n        describe: 'Developer\\'s name',\n        type: 'string'\n      })\n      .option('name-domain', {\n        alias: 'n',\n        coerce: sanitize,\n        describe: 'Reverse Domain Name Notation',\n        type: 'string'\n      })\n      .option('name-human', {\n        describe: 'Human readable name',\n        type: 'string'\n      })\n      .option('package-system', {\n        choices: ['deb'],\n        default: 'deb',\n        describe: 'Package system',\n        type: 'string'\n      })\n      .option('references', {\n        default: (BRANCH != null) ? [`refs/heads/${BRANCH}`] : [],\n        describe: 'References to pull',\n        type: 'array'\n      })\n}\n\n/**\n * Creates a basic storage object for information about the build\n * TODO: All the things\n *\n * @param {object} argv\n * @param {Repository} repository\n * @return {object}\n */\nfunction buildStorage (argv, repository) {\n  const nameDomain = argv['name-domain'] || repository.rdnn\n  const nameAppstream = argv['name-appstream'] || `${nameDomain}.desktop`\n  const nameDeveloper = argv['name-developer'] || 'Rabbitbot'\n  const nameHuman = argv['name-human'] || 'Application' // TODO: Better name?\n\n  const obj : IContext = {\n    appcenter: {},\n    appstream: '',\n    architecture: argv.architecture,\n    changelog: [],\n    distribution: argv.distribution,\n    logs: [],\n    nameAppstream,\n    nameDeveloper,\n    nameDomain,\n    nameHuman,\n    packageSystem: argv['package-system'],\n    references: argv.references,\n    type: argv.type,\n    version: argv.version\n  }\n\n  return obj\n}\n\nfunction logSpacer () {\n  console.log('')\n  console.log('='.repeat(80))\n  console.log('')\n}\n\n/**\n * Logs all of the logs to the console\n *\n * @param {Log[]} logs\n * @return {void}\n */\nfunction logLogs (logs) {\n  for (const log of logs.sort((a, b) => (b.level - a.level))) {\n    logSpacer()\n    console.log(log.toString())\n  }\n}\n\nexport async function handler (argv) {\n  console.warn('THIS COMMAND IS NOT FULLY COMPLETE')\n  console.warn('IT ONLY WORKS ON GITHUB WITH TRAVIS AT THIS TIME')\n\n  const { app } = setup(argv)\n\n  const config = app.get<Config>(Config)\n  const repository = createRepository(argv.repo)\n  const context = buildStorage(argv, repository)\n\n  const worker = Build(config, repository, context)\n\n  const projectDir = path.resolve(process.cwd(), argv.directory)\n\n  console.log(`Testing \"${projectDir}\" project for \"${argv.repo}\"`)\n\n  // Copy over the current folder to the workspace for CI testing.\n  await fs.copy(projectDir, path.resolve(worker.workspace, 'clean'), { overwrite: true })\n  await fs.copy(projectDir, path.resolve(worker.workspace, 'dirty'), { overwrite: true })\n\n  // We set a simple interval to output so we don't timeout on travis\n  const interval = setInterval(() => process.stdout.write('.'), 10000)\n\n  await worker.setup()\n  await worker.run()\n\n  clearInterval(interval)\n  console.log('.')\n\n  if (worker.fails) {\n    console.error(`Error while running build for ${argv.repo} for ${argv.version}`)\n    logLogs(worker.result.logs)\n    logSpacer()\n\n    process.exit(1)\n  } else {\n    console.log(`Built ${argv.repo} for version ${argv.version}`)\n    logLogs(worker.result.logs)\n    logSpacer()\n\n    process.exit(0)\n  }\n}\n"]}