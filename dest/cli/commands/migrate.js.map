{"version":3,"sources":["../src/cli/commands/migrate.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;;;;;;;;AAEH,gEAAgE;AAChE,4BAA4B;AAE5B,iDAA6C;AAC7C,4CAAoC;AAEvB,QAAA,OAAO,GAAG,SAAS,CAAA;AACnB,QAAA,QAAQ,GAAG,kDAAkD,CAAA;AAE7D,QAAA,OAAO,GAAG,CAAC,KAAK,EAAE,EAAE;IAC7B,OAAO,KAAK;SACT,MAAM,CAAC,WAAW,EAAE,EAAE,QAAQ,EAAE,0BAA0B,EAAE,IAAI,EAAE,QAAQ,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAA;AACnG,CAAC,CAAA;AAED,iBAA+B,IAAI;;QACjC,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,iBAAK,CAAC,IAAI,CAAC,CAAA;QACnC,MAAM,QAAQ,GAAG,GAAG,CAAC,GAAG,CAAW,mBAAQ,CAAC,CAAA;QAE5C,IAAI,IAAI,CAAC,SAAS,KAAK,IAAI,EAAE;YAC3B,MAAM,OAAO,GAAG,MAAM,CAAC,GAAG,CAAC,iBAAiB,EAAE,QAAQ,CAAC,CAAA;YACvD,OAAO,CAAC,GAAG,CAAC,+BAA+B,OAAO,UAAU,CAAC,CAAA;SAC9D;aAAM,IAAI,IAAI,CAAC,SAAS,KAAK,MAAM,EAAE;YACpC,OAAO,CAAC,GAAG,CAAC,uCAAuC,CAAC,CAAA;SACrD;aAAM;YACL,OAAO,CAAC,KAAK,CAAC,uCAAuC,IAAI,CAAC,SAAS,yBAAyB,CAAC,CAAA;YAC7F,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;SAChB;QAED,IAAI;YACF,IAAI,IAAI,CAAC,SAAS,KAAK,IAAI,EAAE;gBAC3B,MAAM,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAA;aACrC;iBAAM,IAAI,IAAI,CAAC,SAAS,KAAK,MAAM,EAAE;gBACpC,MAAM,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAA;aACvC;SACF;QAAC,OAAO,CAAC,EAAE;YACV,OAAO,CAAC,KAAK,CAAC,gCAAgC,CAAC,CAAA;YAC/C,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAA;YACxB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;SAChB;QAED,OAAO,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAA;QACtC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;IACjB,CAAC;CAAA;AA5BD,0BA4BC","file":"migrate.js","sourcesContent":["/**\n * houston/src/cli/commands/migrate.ts\n * Runs database migration scripts\n */\n\n// Command line files are allowed to have console log statements\n// tslint:disable no-console\n\nimport { Database } from '../../lib/database'\nimport { setup } from '../utilities'\n\nexport const command = 'migrate'\nexport const describe = 'Changes database tables based on houston schemas'\n\nexport const builder = (yargs) => {\n    return yargs\n      .option('direction', { describe: 'The direction to migrate', type: 'string', default: 'up' })\n}\n\nexport async function handler (argv) {\n  const { app, config } = setup(argv)\n  const database = app.get<Database>(Database)\n\n  if (argv.direction === 'up') {\n    const version = config.get('houston.version', 'latest')\n    console.log(`Updating database tables to ${version} version`)\n  } else if (argv.direction === 'down') {\n    console.log(`Downgrading database tables 1 version`)\n  } else {\n    console.error(`Incorrect non-option arguments: got ${argv.direction}, need at be up or down`)\n    process.exit(1)\n  }\n\n  try {\n    if (argv.direction === 'up') {\n      await database.knex.migrate.latest()\n    } else if (argv.direction === 'down') {\n      await database.knex.migrate.rollback()\n    }\n  } catch (e) {\n    console.error('Error updating database tables')\n    console.error(e.message)\n    process.exit(1)\n  }\n\n  console.log('Updated database tables')\n  process.exit(0)\n}\n"]}