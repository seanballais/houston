{"version":3,"sources":["../src/cli/utilities.ts"],"names":[],"mappings":";AAAA;;;GAGG;;AAEH,gEAAgE;AAChE,4BAA4B;AAE5B,oCAAgC;AAChC,iDAAgD;AAChD,oCAAmC;AAEnC;;;;;GAKG;AACH,eAAuB,IAAI;IACzB,MAAM,MAAM,GAAG,kBAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;IACrC,MAAM,GAAG,GAAG,IAAI,SAAG,CAAC,MAAM,CAAC,CAAA;IAC3B,MAAM,MAAM,GAAG,GAAG,CAAC,GAAG,CAAC,YAAM,CAAC,CAAA;IAE9B,OAAO,CAAC,EAAE,CAAC,oBAAoB,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAA;IAEnE,OAAO,EAAE,GAAG,EAAE,MAAM,EAAE,MAAM,EAAE,CAAA;AAChC,CAAC;AARD,sBAQC","file":"utilities.js","sourcesContent":["/**\n * houston/src/cli/utilities.ts\n * Some utilities for command line stuff\n */\n\n// Command line files are allowed to have console log statements\n// tslint:disable no-console\n\nimport { App } from '../lib/app'\nimport { getConfig } from '../lib/config/loader'\nimport { Logger } from '../lib/log'\n\n/**\n * Sets up some boilderplate application classes based on command line args\n *\n * @param {Object} argv\n * @return {Object}\n */\nexport function setup (argv) {\n  const config = getConfig(argv.config)\n  const app = new App(config)\n  const logger = app.get(Logger)\n\n  process.on('unhandledRejection', (reason) => console.error(reason))\n\n  return { app, config, logger }\n}\n"]}