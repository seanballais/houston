{"version":3,"sources":["../src/repo/repo.ts"],"names":[],"mappings":"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","file":"repo.js","sourcesContent":["/**\n * houston/src/repo/repo.ts\n * Entry point for repository syslog server. I whould highly recommend reading\n * some of the code from the node syslogd package and the dgram docs.\n *\n * TODO: We should cache download count for a while so we can mass increment\n *\n * @exports {Class} Repo - A repository syslog server\n */\n\nimport * as dgram from 'dgram'\nimport { inject, injectable } from 'inversify'\n\nimport { Config } from '../lib/config'\nimport { Database } from '../lib/database/database'\nimport { Logger } from '../lib/log'\n\n/**\n * Repo\n * A repository syslog server. Tries to mirror the Server class methods.\n *\n * @property {Socket} server\n * @property {number} port\n */\n@injectable()\nexport class Repo {\n\n  public server: dgram.Socket\n  public port: number\n\n  protected config: Config\n  protected database: Database\n  protected logger: Logger\n\n  /**\n   * Creates a new web server\n   *\n   * @param {Config} config - The configuration to use\n   * @param {Database} database - The database connection to use\n   * @param {Logger} logger - The log instance to use\n   */\n  constructor (\n    @inject(Config) config: Config,\n    @inject(Database) database: Database,\n    @inject(Logger) logger: Logger\n  ) {\n    this.config = config\n    this.database = database\n    this.logger = logger\n  }\n\n  /**\n   * onError\n   * Handles a download message from web server\n   *\n   * @param {Error} err - An error that occured\n   *\n   * @return {void}\n   */\n  public onError (err: Error): void {\n    this.logger\n      .error('Internal server error')\n      .setError(err)\n      .send()\n  }\n\n  /**\n   * onMessage\n   * Handles a download message from web server\n   *\n   * @async\n   * @param {Buffer} buf - The message sent from the web server\n   *\n   * @return {void}\n   */\n  public async onMessage (buf: Buffer): Promise<void> {\n    const message = buf.toString('utf8').split(': ')[1]\n\n    // Possibly a broken message?\n    if (message == null || message === '') {\n      return\n    }\n\n    // Format: ip address | status code | path | bytes | user agent | time\n    const [, status] = message.split('|')\n\n    // Trying to get a file that errored, or does not exist.\n    if (Number(status) >= 400) {\n      return\n    }\n\n    // TODO: Increment package download count\n  }\n\n  /**\n   * listen\n   * Starts the repository syslogd server\n   *\n   * @async\n   * @param {number} [port] - A port to listen on. Kept for backwards support\n   *\n   * @throws {Error} - When unable to listen to requested port\n   * @return {Server} - An active Server class\n   */\n  public async listen (port = 0): Promise<this> {\n    const env = this.config.get('environment')\n    this.server = dgram.createSocket('udp4')\n\n    this.server.on('error', (err) => this.onError(err))\n    this.server.on('message', (msg) => this.onMessage(msg))\n\n    try {\n      await new Promise((resolve, reject) => {\n        this.server.bind({ port }, (err: Error) => {\n          if (err) {\n            return reject(err)\n          }\n\n          return resolve()\n        })\n      })\n    } catch (err) {\n      this.logger\n        .error(`Server unable to listen on port ${port} with ${env} configuration`)\n        .setError(err)\n        .send()\n\n      throw err\n    }\n\n    this.port = this.server.address().port\n    this.logger\n      .info(`Server listening on port ${this.port} with ${env} configuration`)\n      .send()\n\n    return this\n  }\n\n  /**\n   * close\n   * Stops the syslog server\n   *\n   * @async\n   *\n   * @throws {Error} - When the Server class is messed up\n   * @return {Server} - An inactive Server class\n   */\n  public async close (): Promise<this> {\n    if (this.server != null) {\n      await new Promise((resolve) => {\n        this.server.close(() => resolve())\n      })\n\n      this.port = 0\n    }\n\n    return this\n  }\n}\n"]}